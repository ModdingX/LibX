import net.minecraftforge.gradle.common.util.ModConfig
import net.minecraftforge.gradle.common.util.RunConfig
import org.apache.maven.artifact.versioning.ComparableVersion

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://dist.creeper.host/Sponge/maven' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.apache.maven', name: 'maven-artifact', version: '3.6.3+'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'com.matthewprenger.cursegradle'
//apply plugin: 'org.spongepowered.mixin'

apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/secrets.gradle'
apply from: 'https://raw.githubusercontent.com/MinecraftModDevelopment/Gradle-Collection/master/generic/markdown-git-changelog.gradle'

loadSecrets()
group = 'io.github.noeppi_noeppi.mods'
archivesBaseName = 'LibX'
version = getVersion(group, archivesBaseName, "${mc_version}-${base_version}")

println "${archivesBaseName} version: ${version}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings("snapshot", mappings_version)
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    createRunConfig("Client")
    createRunConfig("Server")
    createRunConfig("Data", { RunConfig run ->
        run.args "--mod", modid, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources"), "--existing", file("libs/resources")
    })
}

def createRunConfig(String name, Closure extra = {}) {
    minecraft.runs.create(name) { RunConfig run ->
        run.workingDirectory project.file("run" + name)
        run.property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
        run.jvmArg "-Dmixin.env.disableRefMap=true"
        run.property "forge.logging.console.level", "info"
        run.mods.create(modid) { ModConfig mod ->
            source sourceSets.main
        }
    }.with(extra)
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    mavenCentral()
    maven {
        name = 'Forge'
        url = 'https://files.minecraftforge.net/maven/'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

jar {
    manifest {
        attributes([
                'Specification-Title'     : modid,
                'Specification-Vendor'    : 'noeppi_noeppi',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.version,
                'Implementation-Vendor'   : 'noeppi_noeppi',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

javadoc {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.destinationDirectory(file("build/docs/${version}"))
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version

            artifact jar

            pom {
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "/var/www/maven"
        }
    }
}

curseforge {
    apiKey = findProperty('curse_auth') ?: 0
    def versions = "${curse_versions}".split(', ')
    project {
        if (project.hasProperty('curse_project')) {
            id = "${curse_project}"
            releaseType = 'alpha'
            changelog = getGitChangelog()
            println(changelog)
            changelogType = 'markdown'

            versions.each {
                addGameVersion "${it}"
            }

            if (project.hasProperty('curse_requirements') || project.hasProperty('curse_optionals')) {

                mainArtifact(jar) {

                    relations {

                        if (project.hasProperty('curse_requirements')) {
                            def requirements = "${curse_requirements}".split(', ')
                            requirements.each {

                                requiredLibrary "${it}"
                            }
                        }

                        if (project.hasProperty('curse_optionals')) {
                            def optionals = "${curse_optionals}".split(',')
                            optionals.each {

                                optionalLibrary "${it}"
                            }
                        }
                    }
                }
            }
        }
    }
}

private static String getVersion(String group, String artifact, String baseVersion) {
    java.nio.file.Path mavenPath = Paths.get('/var/www/maven').resolve(group.replace('.', '/')).resolve(artifact)
    if (!Files.isDirectory(mavenPath)) {
        return "${baseVersion}.0"
    }
    return "${baseVersion}." + Files.walk(mavenPath)
            .filter{path -> Files.isRegularFile(path) && path.getFileName().toString().endsWith('.pom')}
            .map{path ->
                String fileName = path.getFileName().toString()
                fileName.substring(fileName.indexOf('-', artifact.size()) + 1, fileName.length() - 4)
            }.filter{version -> version.startsWith(baseVersion)}
            .max{s1, s2 -> new ComparableVersion(s1).compareTo(new ComparableVersion(s2))}
            .map{ver -> ver.substring(ver.findLastIndexOf{ str -> !"0123456789".contains(str) } + 1)}
            .map{ver -> ver.isEmpty() ? "-1" : ver }
            .map{ver -> (ver.toInteger() + 1).toString()}
            .orElse("0")
}
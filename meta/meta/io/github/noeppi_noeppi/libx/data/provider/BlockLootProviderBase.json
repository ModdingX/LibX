{
  "name": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase",
  "simpleName": "BlockLootProviderBase",
  "sourceNam": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase",
  "modifiers": [
    "public",
    "abstract"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "interfaces": [
    {
      "name": "net/minecraft/data/DataProvider",
      "signature": "net.minecraft.data.DataProvider",
      "parameters": []
    }
  ],
  "fields": [
    {
      "name": "GSON",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": {
        "name": "com.google.gson.Gson",
        "desc": "Lcom/google/gson/Gson;",
        "binaryName": "com/google/gson/Gson"
      }
    },
    {
      "name": "mod",
      "modifiers": [
        "protected",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.mod.ModX",
        "desc": "Lio/github/noeppi_noeppi/libx/mod/ModX;",
        "binaryName": "io/github/noeppi_noeppi/libx/mod/ModX"
      }
    },
    {
      "name": "generator",
      "modifiers": [
        "protected",
        "final"
      ],
      "type": {
        "name": "net.minecraft.data.DataGenerator",
        "desc": "Lnet/minecraft/data/DataGenerator;",
        "binaryName": "net/minecraft/data/DataGenerator"
      }
    },
    {
      "name": "blacklist",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.Set<net.minecraft.world.level.block.Block>",
        "desc": "Ljava/util/Set;",
        "binaryName": "java/util/Set"
      }
    },
    {
      "name": "functionMap",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.Map<net.minecraft.world.level.block.Block,java.util.function.Function<net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable.Builder>>",
        "desc": "Ljava/util/Map;",
        "binaryName": "java/util/Map"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.mod.ModX,net.minecraft.data.DataGenerator)void",
      "parameters": [
        {
          "name": "mod",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.mod.ModX",
            "desc": "Lio/github/noeppi_noeppi/libx/mod/ModX;",
            "binaryName": "io/github/noeppi_noeppi/libx/mod/ModX"
          }
        },
        {
          "name": "generator",
          "type": {
            "name": "net.minecraft.data.DataGenerator",
            "desc": "Lnet/minecraft/data/DataGenerator;",
            "binaryName": "net/minecraft/data/DataGenerator"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "customLootTable",
      "modifiers": [
        "protected"
      ],
      "type": "(net.minecraft.world.level.block.Block)void",
      "parameters": [
        {
          "name": "block",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "The given block will not be processed by this provider.",
        "text": "The given block will not be processed by this provider. Useful when you want to create the loot table manually.",
        "properties": []
      }
    },
    {
      "name": "customLootTable",
      "modifiers": [
        "protected"
      ],
      "type": "(net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable.Builder)void",
      "parameters": [
        {
          "name": "block",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          }
        },
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.LootTable.Builder",
            "desc": "Lnet/minecraft/world/level/storage/loot/LootTable$Builder;",
            "binaryName": "net/minecraft/world/level/storage/loot/LootTable$Builder"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "The given block will get the given loot table.",
        "text": "The given block will get the given loot table.",
        "properties": []
      }
    },
    {
      "name": "customLootTable",
      "modifiers": [
        "protected"
      ],
      "type": "(net.minecraft.world.level.block.Block,java.util.function.Function<net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable.Builder>)void",
      "parameters": [
        {
          "name": "block",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          }
        },
        {
          "name": "loot",
          "type": {
            "name": "java.util.function.Function<net.minecraft.world.level.block.Block,net.minecraft.world.level.storage.loot.LootTable.Builder>",
            "desc": "Ljava/util/function/Function;",
            "binaryName": "java/util/function/Function"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "The given block will get the given loot table function.",
        "text": "The given block will get the given loot table function.",
        "properties": []
      }
    },
    {
      "name": "getName",
      "modifiers": [
        "public",
        "final"
      ],
      "type": "()java.lang.String",
      "parameters": [],
      "return": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      },
      "throws": []
    },
    {
      "name": "run",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.data.HashCache)void",
      "parameters": [
        {
          "name": "cache",
          "type": {
            "name": "net.minecraft.data.HashCache",
            "desc": "Lnet/minecraft/data/HashCache;",
            "binaryName": "net/minecraft/data/HashCache"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [
        {
          "name": "java.io.IOException",
          "desc": "Ljava/io/IOException;",
          "binaryName": "java/io/IOException"
        }
      ]
    },
    {
      "name": "setup",
      "modifiers": [
        "protected",
        "abstract"
      ],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    },
    {
      "name": "getPath",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "(java.nio.file.Path,net.minecraft.resources.ResourceLocation)java.nio.file.Path",
      "parameters": [
        {
          "name": "root",
          "type": {
            "name": "java.nio.file.Path",
            "desc": "Ljava/nio/file/Path;",
            "binaryName": "java/nio/file/Path"
          }
        },
        {
          "name": "id",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          }
        }
      ],
      "return": {
        "name": "java.nio.file.Path",
        "desc": "Ljava/nio/file/Path;",
        "binaryName": "java/nio/file/Path"
      },
      "throws": []
    },
    {
      "name": "copyNBT",
      "modifiers": [
        "public"
      ],
      "type": "(java.lang.String[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "tags",
          "type": {
            "name": "java.lang.String[]",
            "arrayOf": {
              "name": "java.lang.String",
              "desc": "Ljava/lang/String;",
              "binaryName": "java/lang/String"
            }
          },
          "doc": "The toplevel tags of the block entity to be copied."
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Creates a loot modifier that copies NBT-Data from a block entity into the dropped item.",
        "text": "Creates a loot modifier that copies NBT-Data from a block entity into the dropped item. Use this<br> with one of the <ref cls=\"io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase\" method=\"drops\" type=\"(net.minecraft.world.level.block.Block,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])void\">drops</ref> methods.",
        "properties": []
      }
    },
    {
      "name": "copyProperties",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.state.properties.Property<?>[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "properties",
          "type": {
            "name": "net.minecraft.world.level.block.state.properties.Property<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.block.state.properties.Property<?>",
              "desc": "Lnet/minecraft/world/level/block/state/properties/Property;",
              "binaryName": "net/minecraft/world/level/block/state/properties/Property"
            }
          },
          "doc": "The properties of the block state to be copied."
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Creates a loot modifier that copies properties from a block state into the dropped item.",
        "text": "Creates a loot modifier that copies properties from a block state into the dropped item. Use this<br> with one of the <ref cls=\"io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase\" method=\"drops\" type=\"(net.minecraft.world.level.block.Block,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])void\">drops</ref> methods.",
        "properties": []
      }
    },
    {
      "name": "drops",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.Block,boolean,net.minecraft.world.item.ItemStack[])void",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          },
          "doc": "The block to add the loot table to."
        },
        {
          "name": "silk",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether the block can be mined with silk touch to drop itself."
        },
        {
          "name": "drops",
          "type": {
            "name": "net.minecraft.world.item.ItemStack[]",
            "arrayOf": {
              "name": "net.minecraft.world.item.ItemStack",
              "desc": "Lnet/minecraft/world/item/ItemStack;",
              "binaryName": "net/minecraft/world/item/ItemStack"
            }
          },
          "doc": "A list of stacks that will all be dropped if silk touch is false or the block<br>              is mined without silk touch."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Method to add a custom loot table for a block.",
        "text": "Method to add a custom loot table for a block.",
        "properties": []
      }
    },
    {
      "name": "drops",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.Block,boolean,net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[])void",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          },
          "doc": "The block to add the loot table to."
        },
        {
          "name": "silk",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether the block can be mined with silk touch to drop itself."
        },
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
              "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
            }
          },
          "doc": "A list of loot factories that will all be applied if silk touch is false or the block<br>             is mined without silk touch."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Method to add a custom loot table for a block.",
        "text": "Method to add a custom loot table for a block.",
        "properties": []
      }
    },
    {
      "name": "drops",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.Block,boolean,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])void",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          },
          "doc": "The block to add the loot table to."
        },
        {
          "name": "silk",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether the block can be mined with silk touch to drop itself."
        },
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          },
          "doc": "A list of loot factories that will all be applied if silk touch is false or the block<br>             is mined without silk touch."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Method to add a custom loot table for a block.",
        "text": "Method to add a custom loot table for a block.",
        "properties": []
      }
    },
    {
      "name": "drops",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.Block,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])void",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          },
          "doc": "The block to add the loot table to."
        },
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          },
          "doc": "A list of loot factories that will all be applied."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Method to add a custom loot table for a block.",
        "text": "Method to add a custom loot table for a block.",
        "properties": []
      }
    },
    {
      "name": "drops",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.block.Block,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier,io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])void",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          },
          "doc": "The block to add the loot table to."
        },
        {
          "name": "silk",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier",
            "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier;",
            "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier"
          },
          "doc": "Either null in which case no special handling of silk touch is done or a LootModifier that<br>             can modify the stack after mining with silk touch."
        },
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          },
          "doc": "A list of loot factories that are used when silk ouch is either null or the block is mined<br>             without silk touch. All of them will be applied."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Method to add a custom loot table for a block.",
        "text": "Method to add a custom loot table for a block.",
        "properties": []
      }
    },
    {
      "name": "item",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SimpleLootFactory",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SimpleLootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SimpleLootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SimpleLootFactory"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a simple loot factory to always drop the block as item.",
        "text": "Gets a simple loot factory to always drop the block as item.",
        "properties": []
      }
    },
    {
      "name": "silk",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.GenericLootModifier)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier",
      "parameters": [
        {
          "name": "modifier",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.GenericLootModifier",
            "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$GenericLootModifier;",
            "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$GenericLootModifier"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier"
      },
      "throws": [],
      "doc": {
        "summary": "Turns a generic loot modifier into a silk modifier.",
        "text": "Turns a generic loot modifier into a silk modifier. This exists to reduce ambiguity.<br> A silk modifier does not extend <ref cls=\"io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$GenericLootModifier\">GenericLootModifier</ref> for this reason.",
        "properties": []
      }
    },
    {
      "name": "noSilk",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.SilkModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$SilkModifier"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a new silk modifier that means: No special silk touch behaviour.",
        "text": "Gets a new silk modifier that means: No special silk touch behaviour.",
        "properties": []
      }
    },
    {
      "name": "repeat",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory,int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "factory",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
            "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
            "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
          }
        },
        {
          "name": "times",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "throws": [],
      "doc": {
        "summary": "Repeats a loot factory a fixed amount of times.",
        "text": "Repeats a loot factory a fixed amount of times.",
        "properties": []
      }
    },
    {
      "name": "from",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer.Builder<?>)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
      "parameters": [
        {
          "name": "entry",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolSingletonContainer.Builder<?>",
            "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder;",
            "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer$Builder"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry"
      },
      "throws": [],
      "doc": {
        "summary": "Turns a singleton loot entry into a simple loot factory.",
        "text": "Turns a singleton loot entry into a simple loot factory.",
        "properties": []
      }
    },
    {
      "name": "from",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "entry",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
            "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
            "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "throws": [],
      "doc": {
        "summary": "Turns a loot entry into a loot factory.",
        "text": "Turns a loot entry into a loot factory.",
        "properties": []
      }
    },
    {
      "name": "from",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction.Builder<?>)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "function",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.functions.LootItemConditionalFunction.Builder<?>",
            "desc": "Lnet/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder;",
            "binaryName": "net/minecraft/world/level/storage/loot/functions/LootItemConditionalFunction$Builder"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "Turns a loot function into a loot modifier.",
        "text": "Turns a loot function into a loot modifier.",
        "properties": []
      }
    },
    {
      "name": "fortuneOres",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier to apply fortune based on the formula used for ores.",
        "text": "A loot modifier to apply fortune based on the formula used for ores.",
        "properties": []
      }
    },
    {
      "name": "fortuneUniform",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier to apply fortune based on a uniform formula.",
        "text": "A loot modifier to apply fortune based on a uniform formula.",
        "properties": []
      }
    },
    {
      "name": "fortuneUniform",
      "modifiers": [
        "public"
      ],
      "type": "(int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "multiplier",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier to apply fortune based on a uniform formula.",
        "text": "A loot modifier to apply fortune based on a uniform formula.",
        "properties": []
      }
    },
    {
      "name": "fortuneBinomial",
      "modifiers": [
        "public"
      ],
      "type": "(float)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "probability",
          "type": {
            "name": "float",
            "desc": "F"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier to apply fortune based on a binomial formula.",
        "text": "A loot modifier to apply fortune based on a binomial formula.",
        "properties": []
      }
    },
    {
      "name": "fortuneBinomial",
      "modifiers": [
        "public"
      ],
      "type": "(float,int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "probability",
          "type": {
            "name": "float",
            "desc": "F"
          }
        },
        {
          "name": "bonus",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier to apply fortune based on a binomial formula.",
        "text": "A loot modifier to apply fortune based on a binomial formula.",
        "properties": []
      }
    },
    {
      "name": "random",
      "modifiers": [
        "public"
      ],
      "type": "(float)net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [
        {
          "name": "chance",
          "type": {
            "name": "float",
            "desc": "F"
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "throws": [],
      "doc": {
        "summary": "A condition that is random with a chance.",
        "text": "A condition that is random with a chance.",
        "properties": []
      }
    },
    {
      "name": "randomFortune",
      "modifiers": [
        "public"
      ],
      "type": "(float)net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [
        {
          "name": "baseChance",
          "type": {
            "name": "float",
            "desc": "F"
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "throws": [],
      "doc": {
        "summary": "A condition that is random with a chance and optionally different chances for<br> different fortune levels.",
        "text": "A condition that is random with a chance and optionally different chances for<br> different fortune levels. Chances for different levels are computed automatically.",
        "properties": []
      }
    },
    {
      "name": "randomFortune",
      "modifiers": [
        "public"
      ],
      "type": "(float,float[])net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [
        {
          "name": "baseChance",
          "type": {
            "name": "float",
            "desc": "F"
          },
          "doc": "The chance without fortune."
        },
        {
          "name": "levelChances",
          "type": {
            "name": "float[]",
            "arrayOf": {
              "name": "float",
              "desc": "F"
            }
          },
          "doc": "the chances with fortune."
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "A condition that is random with a chance and optionally different chances for<br> different fortune levels.",
        "text": "A condition that is random with a chance and optionally different chances for<br> different fortune levels.",
        "properties": []
      }
    },
    {
      "name": "count",
      "modifiers": [
        "public"
      ],
      "type": "(int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "count",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier that sets the count of a stack.",
        "text": "A loot modifier that sets the count of a stack.",
        "properties": []
      }
    },
    {
      "name": "count",
      "modifiers": [
        "public"
      ],
      "type": "(int,int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "min",
          "type": {
            "name": "int",
            "desc": "I"
          }
        },
        {
          "name": "max",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier that uniformly sets the count of a stack between two values.",
        "text": "A loot modifier that uniformly sets the count of a stack between two values.",
        "properties": []
      }
    },
    {
      "name": "countBinomial",
      "modifiers": [
        "public"
      ],
      "type": "(float,int)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
      "parameters": [
        {
          "name": "chance",
          "type": {
            "name": "float",
            "desc": "F"
          }
        },
        {
          "name": "num",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootModifier",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootModifier"
      },
      "throws": [],
      "doc": {
        "summary": "A loot modifier that sets the count of a stack based on a binomial formula.",
        "text": "A loot modifier that sets the count of a stack based on a binomial formula.",
        "properties": []
      }
    },
    {
      "name": "not",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder)net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [
        {
          "name": "condition",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
            "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
            "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "throws": [],
      "doc": {
        "summary": "Inverts a loot condition",
        "text": "Inverts a loot condition",
        "properties": []
      }
    },
    {
      "name": "or",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder[])net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [
        {
          "name": "conditions",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
              "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
            }
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Joins conditions with OR.",
        "text": "Joins conditions with OR.",
        "properties": []
      }
    },
    {
      "name": "combine",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[])net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
              "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
            }
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
        "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot builders into one.",
        "text": "Combines the given loot builders into one. (All loot builders will be applied).",
        "properties": []
      }
    },
    {
      "name": "combine",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot factories into one.",
        "text": "Combines the given loot factories into one. (All loot factories will be applied).",
        "properties": []
      }
    },
    {
      "name": "random",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[])net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
              "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
            }
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
        "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot builders into one.",
        "text": "Combines the given loot builders into one. (One loot builder will be applied).",
        "properties": []
      }
    },
    {
      "name": "random",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot factories into one.",
        "text": "Combines the given loot factories into one. (One loot factory will be applied).",
        "properties": []
      }
    },
    {
      "name": "first",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[])net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
              "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
            }
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
        "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot builders into one.",
        "text": "Combines the given loot builders into one. Only the first matching builder is applied.",
        "properties": []
      }
    },
    {
      "name": "first",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot factories into one.",
        "text": "Combines the given loot factories into one. Only the first matching factory is applied.",
        "properties": []
      }
    },
    {
      "name": "whileMatch",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[])net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>[]",
            "arrayOf": {
              "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
              "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
              "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
            }
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.entries.LootPoolEntryContainer.Builder<?>",
        "desc": "Lnet/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/entries/LootPoolEntryContainer$Builder"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot builders into one.",
        "text": "Combines the given loot builders into one.<br> From all the loot entries until the first one not matching, one is selected.",
        "properties": []
      }
    },
    {
      "name": "whileMatch",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[])io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
      "parameters": [
        {
          "name": "loot",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory[]",
            "arrayOf": {
              "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
              "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
              "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
            }
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.LootFactory",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$LootFactory"
      },
      "vararg": true,
      "throws": [],
      "doc": {
        "summary": "Combines the given loot factories into one.",
        "text": "Combines the given loot factories into one.<br> From all the loot factories until the first one not matching, one is selected.",
        "properties": []
      }
    },
    {
      "name": "stack",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.ItemLike)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
      "parameters": [
        {
          "name": "item",
          "type": {
            "name": "net.minecraft.world.level.ItemLike",
            "desc": "Lnet/minecraft/world/level/ItemLike;",
            "binaryName": "net/minecraft/world/level/ItemLike"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry"
      },
      "throws": [],
      "doc": {
        "summary": "A loot factory for a specific item.",
        "text": "A loot factory for a specific item.",
        "properties": []
      }
    },
    {
      "name": "matchTool",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.level.ItemLike)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.MatchToolBuilder",
      "parameters": [
        {
          "name": "item",
          "type": {
            "name": "net.minecraft.world.level.ItemLike",
            "desc": "Lnet/minecraft/world/level/ItemLike;",
            "binaryName": "net/minecraft/world/level/ItemLike"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.MatchToolBuilder",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$MatchToolBuilder;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$MatchToolBuilder"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a loot condition builder for a match tool condition.",
        "text": "Gets a loot condition builder for a match tool condition.",
        "properties": []
      }
    },
    {
      "name": "matchTool",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.tags.Tag<net.minecraft.world.item.Item>)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.MatchToolBuilder",
      "parameters": [
        {
          "name": "item",
          "type": {
            "name": "net.minecraft.tags.Tag<net.minecraft.world.item.Item>",
            "desc": "Lnet/minecraft/tags/Tag;",
            "binaryName": "net/minecraft/tags/Tag"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.MatchToolBuilder",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$MatchToolBuilder;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$MatchToolBuilder"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a loot condition builder for a match tool condition.",
        "text": "Gets a loot condition builder for a match tool condition.",
        "properties": []
      }
    },
    {
      "name": "silkCondition",
      "modifiers": [
        "public"
      ],
      "type": "()net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
      "parameters": [],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.predicates.LootItemCondition.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/predicates/LootItemCondition$Builder"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a loot condition for silk touch tools.",
        "text": "Gets a loot condition for silk touch tools.",
        "properties": []
      }
    },
    {
      "name": "stack",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.world.item.ItemStack)io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
      "parameters": [
        {
          "name": "stack",
          "type": {
            "name": "net.minecraft.world.item.ItemStack",
            "desc": "Lnet/minecraft/world/item/ItemStack;",
            "binaryName": "net/minecraft/world/item/ItemStack"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.data.provider.BlockLootProviderBase.WrappedLootEntry",
        "desc": "Lio/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry;",
        "binaryName": "io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase$WrappedLootEntry"
      },
      "throws": [],
      "doc": {
        "summary": "Tries to create the best possible representation of stack in a loot entry.",
        "text": "Tries to create the best possible representation of stack in a loot entry.",
        "properties": []
      }
    },
    {
      "name": "defaultBehavior",
      "modifiers": [
        "protected"
      ],
      "type": "(net.minecraft.world.level.block.Block)net.minecraft.world.level.storage.loot.LootTable.Builder",
      "parameters": [
        {
          "name": "b",
          "type": {
            "name": "net.minecraft.world.level.block.Block",
            "desc": "Lnet/minecraft/world/level/block/Block;",
            "binaryName": "net/minecraft/world/level/block/Block"
          }
        }
      ],
      "return": {
        "name": "net.minecraft.world.level.storage.loot.LootTable.Builder",
        "desc": "Lnet/minecraft/world/level/storage/loot/LootTable$Builder;",
        "binaryName": "net/minecraft/world/level/storage/loot/LootTable$Builder"
      },
      "throws": [],
      "doc": {
        "summary": "Creates a default loot table for the given block.",
        "text": "Creates a default loot table for the given block. Can be overridden to alter<br> default behaviour. Should return null if no loot table should be generated.",
        "properties": []
      }
    },
    {
      "name": "needsLootTable",
      "modifiers": [
        "protected"
      ],
      "type": "(net.minecraft.world.level.block.state.BlockState)boolean",
      "parameters": [
        {
          "name": "state",
          "type": {
            "name": "net.minecraft.world.level.block.state.BlockState",
            "desc": "Lnet/minecraft/world/level/block/state/BlockState;",
            "binaryName": "net/minecraft/world/level/block/state/BlockState"
          }
        }
      ],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Returns whether this block state needs a loot table.",
        "text": "Returns whether this block state needs a loot table. If all block states of a block don't<br> need a loot table, defaultBehavior will return null for that block. Can be overridden to<br> alter the behaviour.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A base class for block loot providers.",
    "text": "A base class for block loot providers. An extending class should call the<br> <ref cls=\"io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase\" method=\"customLootTable\" type=\"(net.minecraft.world.level.block.Block)void\">customLootTable</ref> methods in <ref cls=\"io/github/noeppi_noeppi/libx/data/provider/BlockLootProviderBase\" method=\"setup\" type=\"()void\">setup</ref><br> to adjust the loot tables. Every block of your mod that is left untouched will get<br> a default loot table.",
    "properties": []
  }
}

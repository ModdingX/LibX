{
  "name": "io/github/noeppi_noeppi/libx/util/ResourceList$RuleBuilder",
  "simpleName": "RuleBuilder",
  "sourceNam": "io.github.noeppi_noeppi.libx.util.ResourceList.RuleBuilder",
  "modifiers": [
    "public"
  ],
  "nesting": "member",
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "rulesBuilderList",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "com.google.common.collect.ImmutableList.Builder<io.github.noeppi_noeppi.libx.util.ResourceList.Rule>",
        "desc": "Lcom/google/common/collect/ImmutableList$Builder;",
        "binaryName": "com/google/common/collect/ImmutableList$Builder"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "private"
      ],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "simple",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.resources.ResourceLocation)void",
      "parameters": [
        {
          "name": "rl",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Adds a simple rule that only matches the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>.",
        "text": "Adds a simple rule that only matches the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>.<br> When this rule matches it will return the whitelist state of the resource list<br> as result.",
        "properties": []
      }
    },
    {
      "name": "simple",
      "modifiers": [
        "public"
      ],
      "type": "(boolean,net.minecraft.resources.ResourceLocation)void",
      "parameters": [
        {
          "name": "allow",
          "type": {
            "name": "boolean",
            "desc": "Z"
          }
        },
        {
          "name": "rl",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Adds a simple rule that only matches the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>.",
        "text": "Adds a simple rule that only matches the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>.<br> When this rule matches it will return the value of <code>allow</code> as result.",
        "properties": []
      }
    },
    {
      "name": "parse",
      "modifiers": [
        "public"
      ],
      "type": "(java.lang.String)void",
      "parameters": [
        {
          "name": "rule",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Parses a simple rule.",
        "text": "Parses a simple rule. This allows for a <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref> string where asterisks (*) can<br> match any amount of characters in the <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>. However an asterisk can never<br> match a colon.<br> The special case '*' matches every <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref>.<br> By default this will return the whitelist state of the resource list as result.<br> To change this prepend a plus (+) to make it return true or a minus (-) to make<br> it return false on a match.",
        "properties": []
      }
    },
    {
      "name": "regex",
      "modifiers": [
        "public"
      ],
      "type": "(java.lang.String)void",
      "parameters": [
        {
          "name": "regex",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Adds a rule that checks that a resource location matches a regex.",
        "text": "Adds a rule that checks that a resource location matches a regex.<br> When this rule matches it will return the whitelist state of the resource list<br> as result.",
        "properties": []
      }
    },
    {
      "name": "regex",
      "modifiers": [
        "public"
      ],
      "type": "(boolean,java.lang.String)void",
      "parameters": [
        {
          "name": "allow",
          "type": {
            "name": "boolean",
            "desc": "Z"
          }
        },
        {
          "name": "regex",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Adds a rule that checks that a resource location matches a regex.",
        "text": "Adds a rule that checks that a resource location matches a regex.<br> When this rule matches it will return the value of <code>allow</code> as result.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A builder for rules.",
    "text": "A builder for rules.",
    "properties": []
  }
}

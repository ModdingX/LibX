{
  "name": "io/github/noeppi_noeppi/libx/util/LazyValue",
  "simpleName": "LazyValue",
  "sourceNam": "io.github.noeppi_noeppi.libx.util.LazyValue",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "supplier",
      "modifiers": [
        "private"
      ],
      "type": {
        "name": "java.util.function.Supplier<? extends T>",
        "desc": "Ljava/util/function/Supplier;",
        "binaryName": "java/util/function/Supplier"
      }
    },
    {
      "name": "value",
      "modifiers": [
        "private"
      ],
      "type": {
        "name": "T",
        "typeVar": "T"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(java.util.function.Supplier<? extends T>)void",
      "parameters": [
        {
          "name": "supplier",
          "type": {
            "name": "java.util.function.Supplier<? extends T>",
            "desc": "Ljava/util/function/Supplier;",
            "binaryName": "java/util/function/Supplier"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Creates a new lazy value.",
        "text": "Creates a new lazy value. the supplier will be called once when<br> the value is first retrieved.",
        "properties": []
      }
    }
  ],
  "methods": [
    {
      "name": "wrap",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "<T>(net.minecraft.util.LazyLoadedValue<T>)io.github.noeppi_noeppi.libx.util.LazyValue<T>",
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "net.minecraft.util.LazyLoadedValue<T>",
            "desc": "Lnet/minecraft/util/LazyLoadedValue;",
            "binaryName": "net/minecraft/util/LazyLoadedValue"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.LazyValue<T>",
        "desc": "Lio/github/noeppi_noeppi/libx/util/LazyValue;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/LazyValue"
      },
      "throws": [],
      "doc": {
        "summary": "Wraps a <ref cls=\"net/minecraft/util/LazyLoadedValue\">LazyLoadedValue</ref> to a lazy value.",
        "text": "Wraps a <ref cls=\"net/minecraft/util/LazyLoadedValue\">LazyLoadedValue</ref> to a lazy value.",
        "properties": []
      }
    },
    {
      "name": "get",
      "modifiers": [
        "public"
      ],
      "type": "()T",
      "parameters": [],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the value.",
        "text": "Gets the value. If not yet resolved, resolves the lazy value.",
        "properties": []
      }
    },
    {
      "name": "asDefault",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraftforge.common.util.LazyOptional<T>)io.github.noeppi_noeppi.libx.util.LazyValue<T>",
      "parameters": [
        {
          "name": "optional",
          "type": {
            "name": "net.minecraftforge.common.util.LazyOptional<T>",
            "desc": "Lnet/minecraftforge/common/util/LazyOptional;",
            "binaryName": "net/minecraftforge/common/util/LazyOptional"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.LazyValue<T>",
        "desc": "Lio/github/noeppi_noeppi/libx/util/LazyValue;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/LazyValue"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a lazy value that will have the value of the lazy optional if present.",
        "text": "Gets a lazy value that will have the value of the lazy optional if present. If not<br> it will have the value of this lazy value.",
        "properties": []
      }
    },
    {
      "name": "map",
      "modifiers": [
        "public"
      ],
      "type": "<U>(java.util.function.Function<T,U>)io.github.noeppi_noeppi.libx.util.LazyValue<U>",
      "parameters": [
        {
          "name": "mapper",
          "type": {
            "name": "java.util.function.Function<T,U>",
            "desc": "Ljava/util/function/Function;",
            "binaryName": "java/util/function/Function"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.LazyValue<U>",
        "desc": "Lio/github/noeppi_noeppi/libx/util/LazyValue;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/LazyValue"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a new lazy value that will hold the value of this lazy value applied to<br> the mapper function.",
        "text": "Gets a new lazy value that will hold the value of this lazy value applied to<br> the mapper function. The mapper function will also get called lazy.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A lazy value that is resolved when it is first used.",
    "text": "A lazy value that is resolved when it is first used.",
    "properties": []
  }
}

{
  "name": "io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent",
  "simpleName": "ConfigLoadedEvent",
  "sourceNam": "io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "net/minecraftforge/eventbus/api/Event",
    "signature": "net.minecraftforge.eventbus.api.Event",
    "parameters": []
  },
  "fields": [
    {
      "name": "configId",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "net.minecraft.resources.ResourceLocation",
        "desc": "Lnet/minecraft/resources/ResourceLocation;",
        "binaryName": "net/minecraft/resources/ResourceLocation"
      }
    },
    {
      "name": "configClass",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.lang.Class<?>",
        "desc": "Ljava/lang/Class;",
        "binaryName": "java/lang/Class"
      }
    },
    {
      "name": "reason",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent.LoadReason",
        "desc": "Lio/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason;",
        "binaryName": "io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason"
      }
    },
    {
      "name": "clientConfig",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "boolean",
        "desc": "Z"
      }
    },
    {
      "name": "configPath",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.nio.file.Path",
        "desc": "Ljava/nio/file/Path;",
        "binaryName": "java/nio/file/Path"
      }
    },
    {
      "name": "currentPath",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.nio.file.Path",
        "desc": "Ljava/nio/file/Path;",
        "binaryName": "java/nio/file/Path"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.resources.ResourceLocation,java.lang.Class<?>,io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent.LoadReason,boolean,java.nio.file.Path,java.nio.file.Path)void",
      "parameters": [
        {
          "name": "configId",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          }
        },
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          }
        },
        {
          "name": "reason",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent.LoadReason",
            "desc": "Lio/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason;",
            "binaryName": "io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason"
          }
        },
        {
          "name": "clientConfig",
          "type": {
            "name": "boolean",
            "desc": "Z"
          }
        },
        {
          "name": "configPath",
          "type": {
            "name": "java.nio.file.Path",
            "desc": "Ljava/nio/file/Path;",
            "binaryName": "java/nio/file/Path"
          }
        },
        {
          "name": "currentPath",
          "type": {
            "name": "java.nio.file.Path",
            "desc": "Ljava/nio/file/Path;",
            "binaryName": "java/nio/file/Path"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "getConfigId",
      "modifiers": [
        "public"
      ],
      "type": "()net.minecraft.resources.ResourceLocation",
      "parameters": [],
      "return": {
        "name": "net.minecraft.resources.ResourceLocation",
        "desc": "Lnet/minecraft/resources/ResourceLocation;",
        "binaryName": "net/minecraft/resources/ResourceLocation"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the id of the config that was loaded.",
        "text": "Gets the id of the config that was loaded.",
        "properties": []
      }
    },
    {
      "name": "getConfigClass",
      "modifiers": [
        "public"
      ],
      "type": "()java.lang.Class<?>",
      "parameters": [],
      "return": {
        "name": "java.lang.Class<?>",
        "desc": "Ljava/lang/Class;",
        "binaryName": "java/lang/Class"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the class of the config that was loaded.",
        "text": "Gets the class of the config that was loaded.",
        "properties": []
      }
    },
    {
      "name": "getReason",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent.LoadReason",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.event.ConfigLoadedEvent.LoadReason",
        "desc": "Lio/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason;",
        "binaryName": "io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent$LoadReason"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the reason why the config was loaded",
        "text": "Gets the reason why the config was loaded",
        "properties": []
      }
    },
    {
      "name": "isClientConfig",
      "modifiers": [
        "public"
      ],
      "type": "()boolean",
      "parameters": [],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Gets whether the config is a client config.",
        "text": "Gets whether the config is a client config.",
        "properties": []
      }
    },
    {
      "name": "getConfigPath",
      "modifiers": [
        "public"
      ],
      "type": "()java.nio.file.Path",
      "parameters": [],
      "return": {
        "name": "java.nio.file.Path",
        "desc": "Ljava/nio/file/Path;",
        "binaryName": "java/nio/file/Path"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the path where the config is stored by default.",
        "text": "Gets the path where the config is stored by default.",
        "properties": []
      }
    },
    {
      "name": "getCurrentPath",
      "modifiers": [
        "public"
      ],
      "type": "()java.nio.file.Path",
      "parameters": [],
      "return": {
        "name": "java.nio.file.Path",
        "desc": "Ljava/nio/file/Path;",
        "binaryName": "java/nio/file/Path"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the path where the config is loaded from for this event.",
        "text": "Gets the path where the config is loaded from for this event. For example<br> configs can be loaded per world. In that case <code>currentPath</code><br> will be the path from the world and <ref cls=\"io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent\" method=\"getConfigPath\" type=\"()java.nio.file.Path\">configPath</ref> will be the<br> default path for the config which might still be used for values not present in the<br> world specific config.<br> <br> The value is <code>null</code> when the current config is loaded from a non-file location<br> (for example on shadowing). It can also be the same as <ref cls=\"io/github/noeppi_noeppi/libx/event/ConfigLoadedEvent\" method=\"getConfigPath\" type=\"()java.nio.file.Path\">configPath</ref><br> when the config is loaded from the default path.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "Fired whenever a <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\">LibX config</ref> is loaded.",
    "text": "Fired whenever a <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\">LibX config</ref> is loaded. Is fired on both client and server.<br> The event is not cancelable.",
    "properties": []
  }
}

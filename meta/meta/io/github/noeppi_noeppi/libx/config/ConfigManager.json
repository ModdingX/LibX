{
  "name": "io/github/noeppi_noeppi/libx/config/ConfigManager",
  "simpleName": "ConfigManager",
  "sourceNam": "io.github.noeppi_noeppi.libx.config.ConfigManager",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "configIds",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": {
        "name": "com.google.common.collect.BiMap<net.minecraft.resources.ResourceLocation,java.lang.Class<?>>",
        "desc": "Lcom/google/common/collect/BiMap;",
        "binaryName": "com/google/common/collect/BiMap"
      }
    },
    {
      "name": "configs",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": {
        "name": "java.util.Map<java.lang.Class<?>,java.nio.file.Path>",
        "desc": "Ljava/util/Map;",
        "binaryName": "java/util/Map"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "registerValueMapper",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(java.lang.String,io.github.noeppi_noeppi.libx.config.ValueMapper<?,?>)void",
      "parameters": [
        {
          "name": "modid",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<?,?>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/ValueMapper\">ValueMapper</ref> that can be used to serialise config values.",
        "text": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/ValueMapper\">ValueMapper</ref> that can be used to serialise config values.",
        "properties": []
      }
    },
    {
      "name": "registerValueMapper",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(java.lang.String,io.github.noeppi_noeppi.libx.config.GenericValueMapper<?,?,?>)void",
      "parameters": [
        {
          "name": "modid",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.GenericValueMapper<?,?,?>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/GenericValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/GenericValueMapper"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/GenericValueMapper\">GenericValueMapper</ref> that can be used to serialise config values.",
        "text": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/GenericValueMapper\">GenericValueMapper</ref> that can be used to serialise config values.",
        "properties": []
      }
    },
    {
      "name": "registerConfigValidator",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(java.lang.String,io.github.noeppi_noeppi.libx.config.ConfigValidator<?,?>)void",
      "parameters": [
        {
          "name": "modid",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        },
        {
          "name": "validator",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ConfigValidator<?,?>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ConfigValidator;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ConfigValidator"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigValidator\">ConfigValidator</ref> that can be used to validate config values.",
        "text": "Registers a new <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigValidator\">ConfigValidator</ref> that can be used to validate config values.",
        "properties": []
      }
    },
    {
      "name": "registerConfig",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(java.lang.String,java.lang.Class<?>,boolean)void",
      "parameters": [
        {
          "name": "modid",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          },
          "doc": "The modid of the mod."
        },
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          },
          "doc": "The base class for the config."
        },
        {
          "name": "clientConfig",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether this is a client config."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Registers a config.",
        "text": "Registers a config. This will register a config with the id <code>modid:config</code><br> which means the config will be located in <code>config/modid.json5</code>.",
        "properties": []
      }
    },
    {
      "name": "registerConfig",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(net.minecraft.resources.ResourceLocation,java.lang.Class<?>,boolean)void",
      "parameters": [
        {
          "name": "location",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          },
          "doc": "The id of the config. The config will be located<br>                 in <code>config/namespace/path.json5</code>. Exception is a path of <code>config</code>.<br>                 In this case the config will be located at <code>config/modid.json5</code>."
        },
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          },
          "doc": "The base class for the config."
        },
        {
          "name": "clientConfig",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether this is a client config."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Registers a config.",
        "text": "Registers a config.",
        "properties": []
      }
    },
    {
      "name": "reloadAll",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Forces a reload of all configs.",
        "text": "Forces a reload of all configs. <b>This will not sync the config tough. Use forceResync for this.</b>",
        "properties": []
      }
    },
    {
      "name": "firstLoadConfig",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "(java.lang.Class<?>)void",
      "parameters": [
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    },
    {
      "name": "reloadConfig",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(java.lang.Class<?>)void",
      "parameters": [
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Forces a reload of one config.",
        "text": "Forces a reload of one config. <b>This will not sync the config tough. Use forceResync for this.</b>",
        "properties": []
      }
    },
    {
      "name": "forceResync",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(net.minecraft.server.level.ServerPlayer,java.lang.Class<?>)void",
      "parameters": [
        {
          "name": "player",
          "type": {
            "name": "net.minecraft.server.level.ServerPlayer",
            "desc": "Lnet/minecraft/server/level/ServerPlayer;",
            "binaryName": "net/minecraft/server/level/ServerPlayer"
          }
        },
        {
          "name": "configClass",
          "type": {
            "name": "java.lang.Class<?>",
            "desc": "Ljava/lang/Class;",
            "binaryName": "java/lang/Class"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Forces a resync of one config to one player.",
        "text": "Forces a resync of one config to one player.",
        "properties": []
      }
    },
    {
      "name": "forceResync",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "(net.minecraft.server.level.ServerPlayer)void",
      "parameters": [
        {
          "name": "player",
          "type": {
            "name": "net.minecraft.server.level.ServerPlayer",
            "desc": "Lnet/minecraft/server/level/ServerPlayer;",
            "binaryName": "net/minecraft/server/level/ServerPlayer"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Forces a resync of all configs to one player.",
        "text": "Forces a resync of all configs to one player.",
        "properties": []
      }
    },
    {
      "name": "configs",
      "modifiers": [
        "public",
        "static"
      ],
      "type": "()java.util.Set<net.minecraft.resources.ResourceLocation>",
      "parameters": [],
      "return": {
        "name": "java.util.Set<net.minecraft.resources.ResourceLocation>",
        "desc": "Ljava/util/Set;",
        "binaryName": "java/util/Set"
      },
      "throws": [],
      "doc": {
        "summary": "Gets all registered config ids.",
        "text": "Gets all registered config ids.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "Provides a config system for configuration files that is meant to be more easy and powerful than<br> the system by forge based on com.electronwill.nightconfig.",
    "text": "Provides a config system for configuration files that is meant to be more easy and powerful than<br> the system by forge based on com.electronwill.nightconfig. This system creates<br> json files with comments based on a class. That class may contain fields with <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref><br> annotations. Each field with a config annotation will get one value in the config file. To create sub<br> groups, you can create static nested classes inside the base class. Suppose you have the following<br> class structure:<br> <br> <pre><br> <code><br> public class ExampleConfig {<br><br>     <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref>(&quot;A value&quot;)<br>     public static <ref cls=\"java/lang/Integer\">int</ref> value = 23;<br><br>     <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref>({&quot;Multiline Comments&quot;, &quot;are also possible&quot;})<br>     <ref cls=\"io/github/noeppi_noeppi/libx/config/validator/DoubleRange\">@DoubleRange</ref>(<ref cls=\"io/github/noeppi_noeppi/libx/config/validator/DoubleRange\" method=\"min\" type=\"()double\">min</ref> = 0)<br>     public static <ref cls=\"java/lang/Double\">double</ref> another_value;<br><br>     <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref>(&quot;A component&quot;)<br>     public static <ref cls=\"net/minecraft/network/chat/Component\">Component</ref> component = new <ref cls=\"net/minecraft/network/chat/TextComponent\">TextComponent</ref>(&quot;LibX is fancy&quot;);<br><br>     public static class SubGroup {<br><br>         <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref><br>         public static <ref cls=\"java/util/List\">List</ref>&lt;<ref cls=\"java/lang/Integer\">Integer</ref>&gt; valueList = <ref cls=\"java/util/List\">List</ref>.<ref cls=\"java/util/List\" method=\"of\" type=\"<E>()java.util.List<E>\">of</ref>(1, 5, 23);<br>     }<br> }<br> </code><br> </pre><br> <br> This would create the following config file:<br> <br> <pre><br> <code><br> {<br>   // Multiline Comments<br>   // are also possible<br>   // Minimum: 0<br>   &quot;another_value&quot;: 0.0,<br><br>   // A component<br>   &quot;tc&quot;: {<br>     &quot;text&quot;: &quot;LibX is fancy&quot;<br>   },<br><br>   // A value<br>   &quot;value&quot;: 23,<br><br>   &quot;SubGroup&quot;: {<br>     &quot;coolValues&quot;: [<br>       1, 5, 23<br>     ]<br>   }<br> }<br> </code><br> </pre><br> <br> The values of the fields are the default values for the config.<br> Fields can have any type you want as long as you provide a <ref cls=\"io/github/noeppi_noeppi/libx/config/ValueMapper\">ValueMapper</ref> for that type.<br> You need to register that type via <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\" method=\"registerValueMapper\" type=\"(java.lang.String,io.github.noeppi_noeppi.libx.config.ValueMapper<?,?>)void\">ConfigManager#registerValueMapper(String, ValueMapper)</ref> (or<br> <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\" method=\"registerValueMapper\" type=\"(java.lang.String,io.github.noeppi_noeppi.libx.config.GenericValueMapper<?,?,?>)void\">ConfigManager#registerValueMapper(String, GenericValueMapper)</ref> for generic value mappers).<br> Then you can use that type in a config. Custom registered value mappers are unique for each mod, so<br> you and another mod can add different value mappers for the same class. However you can't add two<br> value mappers for the same class in one mod.<br> <br> By default the following types are supported:<br> <br> <ul><br>     <li>boolean</li><br>     <li>byte</li><br>     <li>short</li><br>     <li>int</li><br>     <li>long</li><br>     <li>float</li><br>     <li>double</li><br>     <li><ref cls=\"java/lang/String\">String</ref></li><br>     <li><ref cls=\"java/util/Optional\">Optionallt?gt</ref></li><br>     <li><ref cls=\"java/util/List\">Listlt?gt</ref></li><br>     <li><ref cls=\"java/util/Map\">MapltString, ?gt</ref></li><br>     <li><ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref></li><br>     <li><ref cls=\"net/minecraft/world/item/crafting/Ingredient\">Ingredient</ref></li><br>     <li><ref cls=\"io/github/noeppi_noeppi/libx/crafting/IngredientStack\">IngredientStack</ref></li><br>     <li><ref cls=\"net/minecraft/network/chat/Component\">Component</ref></li><br>     <li><ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList\">ResourceList</ref></li><br>     <li><ref cls=\"java/util/UUID\">UUID</ref></li><br>     <li>Any <ref cls=\"java/lang/Enum\">enum</ref></li><br>     <li>Any <ref cls=\"java/lang/Record\">record</ref></li><br>     <li>Any <ref cls=\"org/apache/commons/lang3/tuple/Pair\">Pairlt?, ?gt</ref></li><br>     <li>Any <ref cls=\"org/apache/commons/lang3/tuple/Triple\">Triplelt?, ?, ?gt</ref></li><br> </ul><br> <br> If a class uses generics, the <code>?</code> can be any type that is supported by the config system. So<br> you can also use a <code><ref cls=\"java/util/List\">List</ref>lt<ref cls=\"org/apache/commons/lang3/tuple/Pair\">Pair</ref>lt<ref cls=\"java/util/List\">List</ref>lt<ref cls=\"java/lang/Integer\">Integer</ref>gt, <ref cls=\"java/lang/String\">String</ref>gtgt</code>.<br> <br> Each config field can also have <b>one</b> validator annotation applied to validate a value. You can<br> find builtin validator annotations in <ref pkg=\"io/github/noeppi_noeppi/libx/config/validator\">io.github.noeppi_noeppi.libx.config.validator</ref>. To register<br> you own validator, use <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\" method=\"registerConfigValidator\" type=\"(java.lang.String,io.github.noeppi_noeppi.libx.config.ConfigValidator<?,?>)void\">#registerConfigValidator(String, ConfigValidator)</ref>.<br> <br> Configs come in two different types: Common configs and client configs. Common configs are loaded on<br> both the dedicated server and the client and are synced from server to client. Client configs are<br> only loaded on the client.<br> A config is registered with <ref cls=\"io/github/noeppi_noeppi/libx/config/ConfigManager\" method=\"registerConfig\" type=\"(net.minecraft.resources.ResourceLocation,java.lang.Class<?>,boolean)void\">ConfigManager#registerConfig(ResourceLocation, Class, boolean)</ref>.<br> You can then just use the values in the config class. Make sure to not modify them as the results<br> are unpredictable.<br> <br> Config values may never be null in the code. However value mappers are allowed to produce json-null<br> values. If you need a nullable value in the config, use an Optional. Empty Optionals will translate<br> to null in the JSON.",
    "properties": []
  }
}

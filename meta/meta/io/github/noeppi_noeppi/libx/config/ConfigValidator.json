{
  "name": "io/github/noeppi_noeppi/libx/config/ConfigValidator",
  "simpleName": "ConfigValidator",
  "sourceNam": "io.github.noeppi_noeppi.libx.config.ConfigValidator",
  "modifiers": [
    "public",
    "abstract"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "methods": [
    {
      "name": "type",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()java.lang.Class<T>",
      "parameters": [],
      "return": {
        "name": "java.lang.Class<T>",
        "desc": "Ljava/lang/Class;",
        "binaryName": "java/lang/Class"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the class of the type that this validator can validate.",
        "text": "Gets the class of the type that this validator can validate.",
        "properties": []
      }
    },
    {
      "name": "annotation",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()java.lang.Class<A>",
      "parameters": [],
      "return": {
        "name": "java.lang.Class<A>",
        "desc": "Ljava/lang/Class;",
        "binaryName": "java/lang/Class"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the class of the annotation type used by this validator.",
        "text": "Gets the class of the annotation type used by this validator.",
        "properties": []
      }
    },
    {
      "name": "validate",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "(T,A)java.util.Optional<T>",
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "T",
            "typeVar": "T"
          }
        },
        {
          "name": "validator",
          "type": {
            "name": "A",
            "typeVar": "A"
          }
        }
      ],
      "return": {
        "name": "java.util.Optional<T>",
        "desc": "Ljava/util/Optional;",
        "binaryName": "java/util/Optional"
      },
      "throws": [],
      "doc": {
        "summary": "Validates a value.",
        "text": "Validates a value. For a correct value this should return an empty Optional.<br> For an incorrect value this should return an Optional containing the corrected value.",
        "properties": []
      }
    },
    {
      "name": "comment",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(A)java.util.List<java.lang.String>",
      "parameters": [
        {
          "name": "validator",
          "type": {
            "name": "A",
            "typeVar": "A"
          }
        }
      ],
      "return": {
        "name": "java.util.List<java.lang.String>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      },
      "throws": [],
      "doc": {
        "summary": "Returns a list of comment lines that will be added to the values specified in <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref>.",
        "text": "Returns a list of comment lines that will be added to the values specified in <ref cls=\"io/github/noeppi_noeppi/libx/config/Config\">@Config</ref>.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A config validator is used to read a custom validation annotation from a config field<br> and validate the value so it for example matches an int range.",
    "text": "A config validator is used to read a custom validation annotation from a config field<br> and validate the value so it for example matches an int range.<br> Validators are applied when a config is read from a file. They are not applied if a<br> server sends a config and they'll not validate the default value.",
    "properties": []
  }
}

{
  "name": "io/github/noeppi_noeppi/libx/config/gui/InputProperties",
  "simpleName": "InputProperties",
  "sourceNam": "io.github.noeppi_noeppi.libx.config.gui.InputProperties",
  "modifiers": [
    "public",
    "abstract"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "PLAIN",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.config.gui.InputProperties<java.lang.String>",
        "desc": "Lio/github/noeppi_noeppi/libx/config/gui/InputProperties;",
        "binaryName": "io/github/noeppi_noeppi/libx/config/gui/InputProperties"
      },
      "doc": {
        "summary": "Input properties for a plain string.",
        "text": "Input properties for a plain string.",
        "properties": []
      }
    }
  ],
  "methods": [
    {
      "name": "defaultValue",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()T",
      "parameters": [],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "gets the default value for newly created inputs that have no other default value available.",
        "text": "gets the default value for newly created inputs that have no other default value available.",
        "properties": []
      }
    },
    {
      "name": "valueOf",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "(java.lang.String)T",
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "Converts some input into a value matching this input properties.",
        "text": "Converts some input into a value matching this input properties. This may fail with an exception<br> only if <ref cls=\"io/github/noeppi_noeppi/libx/config/gui/InputProperties\" method=\"isValid\" type=\"(java.lang.String)boolean\">#isValid(String)</ref> returns <code>false</code> for the same input.",
        "properties": []
      }
    },
    {
      "name": "toString",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(T)java.lang.String",
      "parameters": [
        {
          "name": "t",
          "type": {
            "name": "T",
            "typeVar": "T"
          }
        }
      ],
      "return": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      },
      "throws": [],
      "doc": {
        "summary": "Converts a value matching this input properties to a string.",
        "text": "Converts a value matching this input properties to a string.",
        "properties": []
      }
    },
    {
      "name": "canInputChar",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(char)boolean",
      "parameters": [
        {
          "name": "chr",
          "type": {
            "name": "char",
            "desc": "C"
          }
        }
      ],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Gets whether the user can enter the given char into the input field.",
        "text": "Gets whether the user can enter the given char into the input field.",
        "properties": []
      }
    },
    {
      "name": "isValid",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(java.lang.String)boolean",
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Gets whether a given user input is valid or not.",
        "text": "Gets whether a given user input is valid or not.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "Defines which input is valid and how to convert input for text input editors.",
    "text": "Defines which input is valid and how to convert input for text input editors.",
    "properties": []
  }
}

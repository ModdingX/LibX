{
  "name": "io/github/noeppi_noeppi/libx/config/GenericValueMapper",
  "simpleName": "GenericValueMapper",
  "sourceNam": "io.github.noeppi_noeppi.libx.config.GenericValueMapper",
  "modifiers": [
    "public",
    "abstract"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "interfaces": [
    {
      "name": "io/github/noeppi_noeppi/libx/config/CommonValueMapper",
      "signature": "io.github.noeppi_noeppi.libx.config.CommonValueMapper<T,E>",
      "parameters": [
        null,
        null
      ]
    }
  ],
  "methods": [
    {
      "name": "getGenericElementPosition",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()int",
      "parameters": [],
      "return": {
        "name": "int",
        "desc": "I"
      },
      "throws": [],
      "doc": {
        "summary": "The position which generic type argument should be used to retrieve a value mapper.",
        "text": "The position which generic type argument should be used to retrieve a value mapper. Indices<br> start at 0.",
        "properties": []
      }
    },
    {
      "name": "fromJson",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "(E,io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>)T",
      "parameters": [
        {
          "name": "json",
          "type": {
            "name": "E",
            "typeVar": "E"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        }
      ],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    },
    {
      "name": "toJson",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "(T,io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>)E",
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "T",
            "typeVar": "T"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        }
      ],
      "return": {
        "name": "E",
        "typeVar": "E"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    },
    {
      "name": "fromNetwork",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(net.minecraft.network.FriendlyByteBuf,io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>)T",
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "net.minecraft.network.FriendlyByteBuf",
            "desc": "Lnet/minecraft/network/FriendlyByteBuf;",
            "binaryName": "net/minecraft/network/FriendlyByteBuf"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        }
      ],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    },
    {
      "name": "toNetwork",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(T,net.minecraft.network.FriendlyByteBuf,io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>)void",
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "T",
            "typeVar": "T"
          }
        },
        {
          "name": "buffer",
          "type": {
            "name": "net.minecraft.network.FriendlyByteBuf",
            "desc": "Lnet/minecraft/network/FriendlyByteBuf;",
            "binaryName": "net/minecraft/network/FriendlyByteBuf"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    },
    {
      "name": "correct",
      "modifiers": [
        "public",
        "default"
      ],
      "type": "(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>,io.github.noeppi_noeppi.libx.config.correct.ConfigCorrection<T>)java.util.Optional<T>",
      "parameters": [
        {
          "name": "json",
          "type": {
            "name": "com.google.gson.JsonElement",
            "desc": "Lcom/google/gson/JsonElement;",
            "binaryName": "com/google/gson/JsonElement"
          }
        },
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        },
        {
          "name": "correction",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.correct.ConfigCorrection<T>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/correct/ConfigCorrection;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/correct/ConfigCorrection"
          }
        }
      ],
      "return": {
        "name": "java.util.Optional<T>",
        "desc": "Ljava/util/Optional;",
        "binaryName": "java/util/Optional"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    },
    {
      "name": "createEditor",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "(io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>,io.github.noeppi_noeppi.libx.config.ValidatorInfo<?>)io.github.noeppi_noeppi.libx.config.gui.ConfigEditor<T>",
      "parameters": [
        {
          "name": "mapper",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValueMapper<C,com.google.gson.JsonElement>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValueMapper;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValueMapper"
          }
        },
        {
          "name": "validator",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.config.ValidatorInfo<?>",
            "desc": "Lio/github/noeppi_noeppi/libx/config/ValidatorInfo;",
            "binaryName": "io/github/noeppi_noeppi/libx/config/ValidatorInfo"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.config.gui.ConfigEditor<T>",
        "desc": "Lio/github/noeppi_noeppi/libx/config/gui/ConfigEditor;",
        "binaryName": "io/github/noeppi_noeppi/libx/config/gui/ConfigEditor"
      },
      "throws": [],
      "doc": {
        "summary": "",
        "text": "",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A value mapper for a generic type.",
    "text": "A value mapper for a generic type. This will get the value mapper for the generic<br> that has been used to declare the config field. For example you could create a<br> value mapper for lists that would then get passed a value mapper for the elements<br> of the list so it can fully serialise it.<br> <br> A limitation with these is that you can only have one generic parameter for<br> which you can get a value mapper. Only LibX builtin mappers can have multiple<br> of these.<br> <br> When extending this, you should make the type argument <code>T</code> dependent on <code>C</code>.<br> For example for lists, you should do<br> <code>ListValueMapper&amp;lt;T&amp;gt; implements GenericValueMapper&amp;lt;List&amp;lt;T&amp;gt;, JsonArray, T&amp;gt;</code>.<br> Then you can register a <code>ListValueMapper&amp;lt;?&amp;gt;</code>.",
    "properties": []
  }
}

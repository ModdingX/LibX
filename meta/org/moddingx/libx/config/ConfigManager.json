{"name":"org/moddingx/libx/config/ConfigManager","simpleName":"ConfigManager","sourceName":"org.moddingx.libx.config.ConfigManager","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"constructors":[{"modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"}}],"methods":[{"name":"registerValueMapper","modifiers":["public","static"],"typeId":"(java.lang.String,org.moddingx.libx.config.mapper.ValueMapper<?,?>)void","parameters":[{"name":"modid","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"mapper","type":{"name":"org.moddingx.libx.config.mapper.ValueMapper<?,?>","desc":"Lorg/moddingx/libx/config/mapper/ValueMapper;","binaryName":"org/moddingx/libx/config/mapper/ValueMapper"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\">ValueMapper</ref> that can be used to serialise config values.","text":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\">ValueMapper</ref> that can be used to serialise config values."}},{"name":"registerValueMapper","modifiers":["public","static"],"typeId":"(java.lang.String,org.moddingx.libx.config.mapper.GenericValueMapper<?,?,?>)void","parameters":[{"name":"modid","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"mapper","type":{"name":"org.moddingx.libx.config.mapper.GenericValueMapper<?,?,?>","desc":"Lorg/moddingx/libx/config/mapper/GenericValueMapper;","binaryName":"org/moddingx/libx/config/mapper/GenericValueMapper"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/GenericValueMapper\">GenericValueMapper</ref> that can be used to serialise config values.","text":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/GenericValueMapper\">GenericValueMapper</ref> that can be used to serialise config values."}},{"name":"registerValueMapperFactory","modifiers":["public","static"],"typeId":"(java.lang.String,org.moddingx.libx.config.mapper.MapperFactory<?>)void","parameters":[{"name":"modid","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"factory","type":{"name":"org.moddingx.libx.config.mapper.MapperFactory<?>","desc":"Lorg/moddingx/libx/config/mapper/MapperFactory;","binaryName":"org/moddingx/libx/config/mapper/MapperFactory"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/MapperFactory\">MapperFactory</ref> that can be used to create value mappers based on the generic type of the config key.","text":"Registers a new <ref cls=\"org/moddingx/libx/config/mapper/MapperFactory\">MapperFactory</ref> that can be used to create value mappers based on the generic type of the config key."}},{"name":"registerConfigValidator","modifiers":["public","static"],"typeId":"(java.lang.String,org.moddingx.libx.config.validator.ConfigValidator<?,?>)void","parameters":[{"name":"modid","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"validator","type":{"name":"org.moddingx.libx.config.validator.ConfigValidator<?,?>","desc":"Lorg/moddingx/libx/config/validator/ConfigValidator;","binaryName":"org/moddingx/libx/config/validator/ConfigValidator"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a new <ref cls=\"org/moddingx/libx/config/validator/ConfigValidator\">ConfigValidator</ref> that can be used to validate config values.","text":"Registers a new <ref cls=\"org/moddingx/libx/config/validator/ConfigValidator\">ConfigValidator</ref> that can be used to validate config values."}},{"name":"registerConfig","modifiers":["public","static"],"typeId":"(java.lang.String,java.lang.Class<?>,boolean)void","parameters":[{"name":"modid","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"},"doc":"The modid of the mod."},{"name":"configClass","type":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":"The base class for the config."},{"name":"clientConfig","type":{"name":"boolean","desc":"Z"},"doc":"Whether this is a client config."}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a config.","text":"Registers a config. This will register a config with the id <code>modid:config</code>  which means the config will be located in <code>config/modid.json5</code>."}},{"name":"registerConfig","modifiers":["public","static"],"typeId":"(net.minecraft.resources.ResourceLocation,java.lang.Class<?>,boolean)void","parameters":[{"name":"location","type":{"name":"net.minecraft.resources.ResourceLocation","desc":"Lnet/minecraft/resources/ResourceLocation;","binaryName":"net/minecraft/resources/ResourceLocation"},"doc":"The id of the config. The config will be located                  in <code>config/namespace/path.json5</code>. Exception is a path of <code>config</code>.                  In this case the config will be located at <code>config/modid.json5</code>."},{"name":"configClass","type":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":"The base class for the config."},{"name":"clientConfig","type":{"name":"boolean","desc":"Z"},"doc":"Whether this is a client config."}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers a config.","text":"Registers a config."}},{"name":"reloadCommon","modifiers":["public","static"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"},"doc":{"summary":"Forces reload of all common configs.","text":"Forces reload of all common configs. <b>This will not sync the config though. Use <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"forceResync\" type=\"(net.minecraft.server.level.ServerPlayer)void\">#forceResync(ServerPlayer)</ref> for this.</b>"}},{"name":"reloadClient","modifiers":["public","static"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"},"doc":{"summary":"Forces reload of all client configs.","text":"Forces reload of all client configs."}},{"name":"reloadConfig","modifiers":["public","static"],"typeId":"(java.lang.Class<?>)void","parameters":[{"name":"configClass","type":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Forces reload of one config.","text":"Forces reload of one config. <b>This will not sync the config though. Use <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"forceResync\" type=\"(net.minecraft.server.level.ServerPlayer,java.lang.Class<?>)void\">#forceResync(ServerPlayer, Class)</ref> for this.</b>"}},{"name":"forceResync","modifiers":["public","static"],"typeId":"(net.minecraft.server.level.ServerPlayer,java.lang.Class<?>)void","parameters":[{"name":"player","type":{"name":"net.minecraft.server.level.ServerPlayer","desc":"Lnet/minecraft/server/level/ServerPlayer;","binaryName":"net/minecraft/server/level/ServerPlayer"}},{"name":"configClass","type":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Forces a resync of one config to one player.","text":"Forces a resync of one config to one player."}},{"name":"forceResync","modifiers":["public","static"],"typeId":"(net.minecraft.server.level.ServerPlayer)void","parameters":[{"name":"player","type":{"name":"net.minecraft.server.level.ServerPlayer","desc":"Lnet/minecraft/server/level/ServerPlayer;","binaryName":"net/minecraft/server/level/ServerPlayer"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Forces a resync of all configs to one player.","text":"Forces a resync of all configs to one player."}},{"name":"configs","modifiers":["public","static"],"typeId":"()java.util.Set<net.minecraft.resources.ResourceLocation>","parameters":[],"return":{"name":"java.util.Set<net.minecraft.resources.ResourceLocation>","desc":"Ljava/util/Set;","binaryName":"java/util/Set"},"doc":{"summary":"Gets all registered config ids.","text":"Gets all registered config ids."}}],"doc":{"summary":"Provides a config system for configuration files that is meant to be more easy and powerful than  the system by forge based on com.electronwill.nightconfig.","text":"Provides a config system for configuration files that is meant to be more easy and powerful than  the system by forge based on com.electronwill.nightconfig. This system creates  json files with comments based on a class. That class may contain fields with <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>  annotations. Each field with a config annotation will get one value in the config file. To create sub<br> groups, you can create static nested classes inside the base class. Suppose you have the following  class structure:<br>   <pre>  <code>  public class ExampleConfig {<br>      <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>(&quot;A value&quot;)      public static <ref cls=\"java/lang/Integer\">int</ref> value = 23; <br>     <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>({&quot;Multiline Comments&quot;, &quot;are also possible&quot;})      <ref cls=\"org/moddingx/libx/config/validate/DoubleRange\">@DoubleRange</ref>(<ref cls=\"org/moddingx/libx/config/validate/DoubleRange\" method=\"min\" type=\"()double\">min</ref> = 0)      public static <ref cls=\"java/lang/Double\">double</ref> another_value; <br>     <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>(&quot;A component&quot;)      public static <ref cls=\"net/minecraft/network/chat/Component\">Component</ref> component = <ref cls=\"net/minecraft/network/chat/Component\">Component</ref>.<ref cls=\"net/minecraft/network/chat/Component\" method=\"literal\" type=\"(java.lang.String)net.minecraft.network.chat.MutableComponent\">literal</ref>(&quot;LibX is fancy&quot;); <br>     public static class SubGroup { <br>         <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>          public static <ref cls=\"java/util/List\">List</ref>lt<ref cls=\"java/lang/Integer\">Integer</ref>gt valueList = <ref cls=\"java/util/List\">List</ref>.<ref cls=\"java/util/List\" method=\"of\" type=\"<E>()java.util.List<E>\">of</ref>(1, 5, 23);      }<br> }  </code>  </pre>  <br> This would create the following config file:  <br> <pre>  <code>  {<br>   // Multiline Comments    // are also possible<br>   // Minimum: 0    &quot;another_value&quot;: 0.0,<br>    // A component<br>   &quot;tc&quot;: {      &quot;text&quot;: &quot;LibX is fancy&quot;<br>   }, <br>   // A value    &quot;value&quot;: 23,<br>    &quot;SubGroup&quot;: {<br>     &quot;coolValues&quot;: [        1, 5, 23<br>     ]    }<br> }  </code>  </pre>  <br> The values of the fields are the default values for the config.  Fields can have any type you want as long as you provide a <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\">ValueMapper</ref> for that type.  You need to register that type via <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"registerValueMapper\" type=\"(java.lang.String,org.moddingx.libx.config.mapper.ValueMapper<?,?>)void\">ConfigManager#registerValueMapper(String, ValueMapper)</ref> (or  <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"registerValueMapper\" type=\"(java.lang.String,org.moddingx.libx.config.mapper.GenericValueMapper<?,?,?>)void\">ConfigManager#registerValueMapper(String, GenericValueMapper)</ref> for generic value mappers).  Then you can use that type in a config. Custom registered value mappers are unique for each mod, so<br> you and another mod can add different value mappers for the same class. However, you can't add two  value mappers for the same class in one mod.<br>   By default the following types are supported:<br>   <ul>      <li>boolean</li>      <li>byte</li>      <li>short</li>      <li>int</li>      <li>long</li>      <li>float</li>      <li>double</li>      <li><ref cls=\"java/lang/String\">String</ref></li>      <li><ref cls=\"java/util/Optional\">Optionallt?gt</ref></li>      <li><ref cls=\"java/util/List\">Listlt?gt</ref></li>      <li><ref cls=\"java/util/Map\">MapltString, ?gt</ref></li>      <li><ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref></li>      <li><ref cls=\"net/minecraft/world/item/crafting/Ingredient\">Ingredient</ref></li>      <li><ref cls=\"org/moddingx/libx/crafting/IngredientStack\">IngredientStack</ref></li>      <li><ref cls=\"net/minecraft/network/chat/Component\">Component</ref></li>      <li><ref cls=\"org/moddingx/libx/util/data/ResourceList\">ResourceList</ref></li>      <li><ref cls=\"java/util/UUID\">UUID</ref></li>      <li>Any <ref cls=\"java/lang/Enum\">enum</ref></li>      <li>Any <ref cls=\"java/lang/Record\">record</ref></li>      <li>Any <ref cls=\"org/apache/commons/lang3/tuple/Pair\">Pairlt?, ?gt</ref></li>      <li>Any <ref cls=\"org/apache/commons/lang3/tuple/Triple\">Triplelt?, ?, ?gt</ref></li>  </ul>  <br> If a class uses generics, the <code>?</code> can be any type that is supported by the config system. So  you can also use a <code><ref cls=\"java/util/List\">List</ref>lt<ref cls=\"org/apache/commons/lang3/tuple/Pair\">Pair</ref>lt<ref cls=\"java/util/List\">List</ref>lt<ref cls=\"java/lang/Integer\">Integer</ref>gt, <ref cls=\"java/lang/String\">String</ref>gtgt</code>.  <br> Each config field can also have <b>one</b> validator annotation applied to validate a value. You can  find builtin validator annotations in <ref pkg=\"org/moddingx/libx/config/validator\">org.moddingx.libx.config.validator</ref>. To register  you own validator, use <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"registerConfigValidator\" type=\"(java.lang.String,org.moddingx.libx.config.validator.ConfigValidator<?,?>)void\">#registerConfigValidator(String, ConfigValidator)</ref>.  <br> Configs come in two different types: Common configs and client configs. Common configs are loaded on  both the dedicated server and the client and are synced from server to client. Client configs are<br> only loaded on the client.  A config is registered with <ref cls=\"org/moddingx/libx/config/ConfigManager\" method=\"registerConfig\" type=\"(net.minecraft.resources.ResourceLocation,java.lang.Class<?>,boolean)void\">ConfigManager#registerConfig(ResourceLocation, Class, boolean)</ref>.  You can then just use the values in the config class. Make sure to not modify them as the results<br> are unpredictable.  <br> Config values may never be null in the code. However value mappers are allowed to produce json-null  values. If you need a nullable value in the config, use an Optional. Empty Optionals will translate<br> to null in the JSON."}}

{"name":"org/moddingx/libx/config/mapper/ValueMapper","simpleName":"ValueMapper","sourceName":"org.moddingx.libx.config.mapper.ValueMapper","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"methods":[{"name":"type","modifiers":["public","abstract"],"typeId":"()java.lang.Class<T>","parameters":[],"return":{"name":"java.lang.Class<T>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":{"summary":"Gets the class of the type that this mapper can serialise.","text":"Gets the class of the type that this mapper can serialise."}},{"name":"element","modifiers":["public","abstract"],"typeId":"()java.lang.Class<E>","parameters":[],"return":{"name":"java.lang.Class<E>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":{"summary":"Gets the class of the JSON element type this mapper uses.","text":"Gets the class of the JSON element type this mapper uses."}},{"name":"fromJson","modifiers":["public","abstract"],"typeId":"(E)T","parameters":[{"name":"json","type":{"name":"E","typeVar":"E"},"doc":"The json data"}],"return":{"name":"T","typeVar":"T"},"doc":{"summary":"Reads an object from JSON.","text":"Reads an object from JSON. If the json is invalid you may either throw  an <ref cls=\"java/lang/IllegalStateException\">IllegalStateException</ref> or a <ref cls=\"com/google/gson/JsonParseException\">JsonParseException</ref> to end  config parsing with an error, or just correct errors yourself and return<br> default values.","properties":[{"text":"The value read.","type":"return"}]}},{"name":"toJson","modifiers":["public","abstract"],"typeId":"(T)E","parameters":[{"name":"value","type":{"name":"T","typeVar":"T"},"doc":"The value to serialise"}],"return":{"name":"E","typeVar":"E"},"doc":{"summary":"Serialises a value to JSON.","text":"Serialises a value to JSON.","properties":[{"text":"The resulting json data.","type":"return"}]}},{"name":"fromNetwork","modifiers":["public","default"],"typeId":"(net.minecraft.network.FriendlyByteBuf)T","parameters":[{"name":"buffer","type":{"name":"net.minecraft.network.FriendlyByteBuf","desc":"Lnet/minecraft/network/FriendlyByteBuf;","binaryName":"net/minecraft/network/FriendlyByteBuf"}}],"return":{"name":"T","typeVar":"T"},"doc":{"summary":"Reads a value from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.","text":"Reads a value from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>. The default implementation expects a  JSON string and gives this string to <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\" method=\"fromJson\" type=\"(E)T\">fromJSON</ref>."}},{"name":"toNetwork","modifiers":["public","default"],"typeId":"(T,net.minecraft.network.FriendlyByteBuf)void","parameters":[{"name":"value","type":{"name":"T","typeVar":"T"}},{"name":"buffer","type":{"name":"net.minecraft.network.FriendlyByteBuf","desc":"Lnet/minecraft/network/FriendlyByteBuf;","binaryName":"net/minecraft/network/FriendlyByteBuf"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Writes a value to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.","text":"Writes a value to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>. The default implementation calls  <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\" method=\"toJson\" type=\"(T)E\">toJSON</ref> and writes the resulting JSON as a string."}},{"name":"comment","modifiers":["public","default"],"typeId":"()java.util.List<java.lang.String>","parameters":[],"return":{"name":"java.util.List<java.lang.String>","desc":"Ljava/util/List;","binaryName":"java/util/List"},"doc":{"summary":"Returns a list of comment lines that will be added to the values specified in <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>.","text":"Returns a list of comment lines that will be added to the values specified in <ref cls=\"org/moddingx/libx/config/Config\">@Config</ref>."}},{"name":"correct","modifiers":["public","default"],"typeId":"(com.google.gson.JsonElement,org.moddingx.libx.config.correct.ConfigCorrection<T>)java.util.Optional<T>","parameters":[{"name":"json","type":{"name":"com.google.gson.JsonElement","desc":"Lcom/google/gson/JsonElement;","binaryName":"com/google/gson/JsonElement"}},{"name":"correction","type":{"name":"org.moddingx.libx.config.correct.ConfigCorrection<T>","desc":"Lorg/moddingx/libx/config/correct/ConfigCorrection;","binaryName":"org/moddingx/libx/config/correct/ConfigCorrection"}}],"return":{"name":"java.util.Optional<T>","desc":"Ljava/util/Optional;","binaryName":"java/util/Optional"},"doc":{"summary":"Corrects a config value.","text":"Corrects a config value. This is only called if <ref cls=\"org/moddingx/libx/config/mapper/ValueMapper\" method=\"fromJson\" type=\"(E)T\">#fromJson(JsonElement)</ref> fails.  Here the raw json for the config value is passed. Also a <ref cls=\"org/moddingx/libx/config/correct/ConfigCorrection\">ConfigCorrection</ref> is  passed that allows to correct json of types contained in this value. For example a<br> list value mapper can use the <ref cls=\"org/moddingx/libx/config/correct/ConfigCorrection\">ConfigCorrection</ref> to try to get as many values  as possible out of a json array.","properties":[{"text":"An <ref cls=\"java/util/Optional\">Optional</ref> containing the corrected value or an empty <ref cls=\"java/util/Optional\">Optional</ref>  the correction failed.","type":"return"}]}},{"name":"createEditor","modifiers":["public","abstract"],"typeId":"(org.moddingx.libx.config.validator.ValidatorInfo<?>)org.moddingx.libx.config.gui.ConfigEditor<T>","parameters":[{"name":"validator","type":{"name":"org.moddingx.libx.config.validator.ValidatorInfo<?>","desc":"Lorg/moddingx/libx/config/validator/ValidatorInfo;","binaryName":"org/moddingx/libx/config/validator/ValidatorInfo"},"doc":"Access to the current validator used. Can be used to create different                   editors based on validators."}],"return":{"name":"org.moddingx.libx.config.gui.ConfigEditor<T>","desc":"Lorg/moddingx/libx/config/gui/ConfigEditor;","binaryName":"org/moddingx/libx/config/gui/ConfigEditor"},"doc":{"summary":"Creates a <ref cls=\"org/moddingx/libx/config/gui/ConfigEditor\">ConfigEditor</ref> for this value mapper to display this config in the  config menu.","text":"Creates a <ref cls=\"org/moddingx/libx/config/gui/ConfigEditor\">ConfigEditor</ref> for this value mapper to display this config in the  config menu. To display that this value can't be edited through the GUI, use<br> <ref cls=\"org/moddingx/libx/config/gui/ConfigEditor\" method=\"unsupported\" type=\"<T>(T)org.moddingx.libx.config.gui.ConfigEditor<T>\">ConfigEditor#unsupported(Object)</ref> with a default value that is used if for example  elements of this type are created in a list."}}],"doc":{"summary":"A way to serialise values of a specific type for a config file.","text":"A way to serialise values of a specific type for a config file. See <ref cls=\"org/moddingx/libx/config/ConfigManager\">ConfigManager</ref> for  more info."}}

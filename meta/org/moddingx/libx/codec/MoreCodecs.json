{"name":"org/moddingx/libx/codec/MoreCodecs","simpleName":"MoreCodecs","sourceName":"org.moddingx.libx.codec.MoreCodecs","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"fields":[{"name":"UNIT","modifiers":["public","static","final"],"type":{"name":"com.mojang.serialization.Codec<net.minecraft.util.Unit>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"A codec for the <ref cls=\"net/minecraft/util/Unit\">Unit</ref> constant that encodes to nothing.","text":"A codec for the <ref cls=\"net/minecraft/util/Unit\">Unit</ref> constant that encodes to nothing."}},{"name":"SAFE_ITEM_STACK","modifiers":["public","static","final"],"type":{"name":"com.mojang.serialization.Codec<net.minecraft.world.item.ItemStack>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"A <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> for <ref cls=\"net/minecraft/world/item/ItemStack\">item stacks</ref> that will encode the stack as NBT when using  NBT dynamic ops, as recipe JSON when using JSON dynamic ops and as a string containing the NBT tag<br> if using some other dynamic ops.","text":"A <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> for <ref cls=\"net/minecraft/world/item/ItemStack\">item stacks</ref> that will encode the stack as NBT when using  NBT dynamic ops, as recipe JSON when using JSON dynamic ops and as a string containing the NBT tag<br> if using some other dynamic ops."}}],"constructors":[{"modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"}}],"methods":[{"name":"error","modifiers":["public","static"],"typeId":"<T>(java.lang.String)com.mojang.serialization.Codec<T>","parameters":[{"name":"msg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that always errors with the given message.","text":"Gets a codec that always errors with the given message."}},{"name":"error","modifiers":["public","static"],"typeId":"<T>(java.lang.String,java.lang.String)com.mojang.serialization.Codec<T>","parameters":[{"name":"encodeMsg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"decodeMsg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that always errors with the given messages.","text":"Gets a codec that always errors with the given messages."}},{"name":"option","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>)com.mojang.serialization.Codec<java.util.Optional<T>>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}}],"return":{"name":"com.mojang.serialization.Codec<java.util.Optional<T>>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that encodes an <ref cls=\"java/util/Optional\">Optional</ref> with a given child codec.","text":"Gets a codec that encodes an <ref cls=\"java/util/Optional\">Optional</ref> with a given child codec."}},{"name":"enumCodec","modifiers":["public","static"],"typeId":"<T>(java.lang.Class<T>)com.mojang.serialization.Codec<T>","parameters":[{"name":"clazz","type":{"name":"java.lang.Class<T>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that encodes an <ref cls=\"java/lang/Enum\">enum</ref> as a string.","text":"Gets a codec that encodes an <ref cls=\"java/lang/Enum\">enum</ref> as a string."}},{"name":"extend","modifiers":["public","static"],"typeId":"<M,E>(com.mojang.serialization.Codec<M>,com.mojang.serialization.MapCodec<E>)com.mojang.serialization.Codec<com.mojang.datafixers.util.Pair<M,E>>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<M>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"extension","type":{"name":"com.mojang.serialization.MapCodec<E>","desc":"Lcom/mojang/serialization/MapCodec;","binaryName":"com/mojang/serialization/MapCodec"}}],"return":{"name":"com.mojang.serialization.Codec<com.mojang.datafixers.util.Pair<M,E>>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Extends the give <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> with some new fields defined by the given <ref cls=\"com/mojang/serialization/MapCodec\">MapCodec</ref>.","text":"Extends the give <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> with some new fields defined by the given <ref cls=\"com/mojang/serialization/MapCodec\">MapCodec</ref>. The given  codec <b>must</b> encode to a <ref cls=\"com/mojang/serialization/MapLike\">MapLike</ref>."}},{"name":"extend","modifiers":["public","static"],"typeId":"<A,M,E>(com.mojang.serialization.Codec<M>,com.mojang.serialization.MapCodec<E>,java.util.function.Function<A,com.mojang.datafixers.util.Pair<M,E>>,java.util.function.BiFunction<M,E,A>)com.mojang.serialization.Codec<A>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<M>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"extension","type":{"name":"com.mojang.serialization.MapCodec<E>","desc":"Lcom/mojang/serialization/MapCodec;","binaryName":"com/mojang/serialization/MapCodec"}},{"name":"decompose","type":{"name":"java.util.function.Function<A,com.mojang.datafixers.util.Pair<M,E>>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}},{"name":"construct","type":{"name":"java.util.function.BiFunction<M,E,A>","desc":"Ljava/util/function/BiFunction;","binaryName":"java/util/function/BiFunction"}}],"return":{"name":"com.mojang.serialization.Codec<A>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Extends the give <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> with some new fields defined by the given <ref cls=\"com/mojang/serialization/MapCodec\">MapCodec</ref>.","text":"Extends the give <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> with some new fields defined by the given <ref cls=\"com/mojang/serialization/MapCodec\">MapCodec</ref>. The given  codec <b>must</b> encode to a <ref cls=\"com/mojang/serialization/MapLike\">MapLike</ref>."}},{"name":"mapDispatch","modifiers":["public","static"],"typeId":"<A,K,V>(com.mojang.serialization.MapCodec<K>,java.util.function.Function<K,com.mojang.serialization.DataResult<com.mojang.serialization.Codec<? extends V>>>,java.util.function.Function<A,com.mojang.datafixers.util.Pair<K,V>>,java.util.function.BiFunction<K,V,com.mojang.serialization.DataResult<A>>)com.mojang.serialization.Codec<A>","parameters":[{"name":"keyCodec","type":{"name":"com.mojang.serialization.MapCodec<K>","desc":"Lcom/mojang/serialization/MapCodec;","binaryName":"com/mojang/serialization/MapCodec"}},{"name":"valueCodecs","type":{"name":"java.util.function.Function<K,com.mojang.serialization.DataResult<com.mojang.serialization.Codec<? extends V>>>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}},{"name":"decompose","type":{"name":"java.util.function.Function<A,com.mojang.datafixers.util.Pair<K,V>>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}},{"name":"construct","type":{"name":"java.util.function.BiFunction<K,V,com.mojang.serialization.DataResult<A>>","desc":"Ljava/util/function/BiFunction;","binaryName":"java/util/function/BiFunction"}}],"return":{"name":"com.mojang.serialization.Codec<A>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Creates a map dispatched codec.","text":"Creates a map dispatched codec. When encoding an element, it ist first decomposed into key and value.  The key is used to obtain a codec to encode the value using the passed <code>valueCodecs</code> function.  The <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> returned from that function <b>must</b> encode to a <ref cls=\"com/mojang/serialization/MapLike\">MapLike</ref>.  After that, the key is encoded and merged into the <ref cls=\"com/mojang/serialization/MapLike\">MapLike</ref> from the value codec.  <br> Decoding works the other way round in that the key is read first. Then the <code>valueCodecs</code> function  is used to obtain a <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> to decode the value. In the end, the codec uses both key and value to  construct the resulting element. Both the <ref cls=\"com/mojang/serialization/MapCodec\">MapCodec</ref> and the codecs returned from <code>valueCodecs</code>  <b>must</b> be able to work with additional values, they don't know about."}},{"name":"lazy","modifiers":["public","static"],"typeId":"<T>(java.util.function.Supplier<com.mojang.serialization.Codec<T>>)com.mojang.serialization.Codec<T>","parameters":[{"name":"codec","type":{"name":"java.util.function.Supplier<com.mojang.serialization.Codec<T>>","desc":"Ljava/util/function/Supplier;","binaryName":"java/util/function/Supplier"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Lazily wraps the given <ref cls=\"com/mojang/serialization/Codec\">Codec</ref>.","text":"Lazily wraps the given <ref cls=\"com/mojang/serialization/Codec\">Codec</ref>. Useful when codecs need to reference each other to recurse."}},{"name":"optionalFieldOf","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>,java.lang.String)com.mojang.serialization.MapCodec<java.util.Optional<T>>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"name","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}}],"return":{"name":"com.mojang.serialization.MapCodec<java.util.Optional<T>>","desc":"Lcom/mojang/serialization/MapCodec;","binaryName":"com/mojang/serialization/MapCodec"},"doc":{"summary":"Behaves the same as <ref cls=\"com/mojang/serialization/Codec\" method=\"optionalFieldOf\" type=\"(java.lang.String)com.mojang.serialization.MapCodec<java.util.Optional<A>>\">Codec#optionalFieldOf(String)</ref> but instead of silently using the default value  if decoding the element produces an error, propagates the error through.","text":"Behaves the same as <ref cls=\"com/mojang/serialization/Codec\" method=\"optionalFieldOf\" type=\"(java.lang.String)com.mojang.serialization.MapCodec<java.util.Optional<A>>\">Codec#optionalFieldOf(String)</ref> but instead of silently using the default value  if decoding the element produces an error, propagates the error through. The only way this yields an empty<br> <ref cls=\"java/util/Optional\">Optional</ref> is if the key is completely missing."}},{"name":"optionalFieldOf","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>,java.lang.String,T)com.mojang.serialization.MapCodec<T>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"name","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"defaultValue","type":{"name":"T","typeVar":"T"}}],"return":{"name":"com.mojang.serialization.MapCodec<T>","desc":"Lcom/mojang/serialization/MapCodec;","binaryName":"com/mojang/serialization/MapCodec"},"doc":{"summary":"Behaves the same as <ref cls=\"com/mojang/serialization/Codec\" method=\"optionalFieldOf\" type=\"(java.lang.String,A)com.mojang.serialization.MapCodec<A>\">Codec#optionalFieldOf(String, Object)</ref> but instead of silently using the default  value if decoding the element produces an error, propagates the error through.","text":"Behaves the same as <ref cls=\"com/mojang/serialization/Codec\" method=\"optionalFieldOf\" type=\"(java.lang.String,A)com.mojang.serialization.MapCodec<A>\">Codec#optionalFieldOf(String, Object)</ref> but instead of silently using the default  value if decoding the element produces an error, propagates the error through. The only way this yields an<br> empty <ref cls=\"java/util/Optional\">Optional</ref> is if the key is completely missing."}},{"name":"typeMapped","modifiers":["public","static"],"typeId":"<T>(org.moddingx.libx.codec.TypedEncoder<T,?>[])com.mojang.serialization.Codec<T>","parameters":[{"name":"encoders","type":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>[]","arrayOf":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"}}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"vararg":true,"doc":{"summary":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.","text":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.  If no <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> matches, an error will be returned."}},{"name":"typeMapped","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>,org.moddingx.libx.codec.TypedEncoder<T,?>[])com.mojang.serialization.Codec<T>","parameters":[{"name":"fallback","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"encoders","type":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>[]","arrayOf":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"}}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"vararg":true,"doc":{"summary":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.","text":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.  If no <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> matches, the fallback is used."}}],"doc":{"summary":"Provides additional <ref cls=\"com/mojang/serialization/Codec\">codecs</ref>.","text":"Provides additional <ref cls=\"com/mojang/serialization/Codec\">codecs</ref>."}}

{"name":"org/moddingx/libx/codec/MoreCodecs","simpleName":"MoreCodecs","sourceName":"org.moddingx.libx.codec.MoreCodecs","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"fields":[{"name":"UNIT","modifiers":["public","static","final"],"type":{"name":"com.mojang.serialization.Codec<net.minecraft.util.Unit>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"A codec for the <ref cls=\"net/minecraft/util/Unit\">Unit</ref> constant that encodes to nothing.","text":"A codec for the <ref cls=\"net/minecraft/util/Unit\">Unit</ref> constant that encodes to nothing."}},{"name":"SAFE_ITEM_STACK","modifiers":["public","static","final"],"type":{"name":"com.mojang.serialization.Codec<net.minecraft.world.item.ItemStack>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"A <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> for <ref cls=\"net/minecraft/world/item/ItemStack\">item stacks</ref> that will encode the stack as NBT when using  NBT dynamic ops, as recipe JSON when using JSON dynamic ops and as a string containing the NBT tag<br> if using some other dynamic ops.","text":"A <ref cls=\"com/mojang/serialization/Codec\">Codec</ref> for <ref cls=\"net/minecraft/world/item/ItemStack\">item stacks</ref> that will encode the stack as NBT when using  NBT dynamic ops, as recipe JSON when using JSON dynamic ops and as a string containing the NBT tag<br> if using some other dynamic ops."}}],"constructors":[{"modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"}}],"methods":[{"name":"error","modifiers":["public","static"],"typeId":"<T>(java.lang.String)com.mojang.serialization.Codec<T>","parameters":[{"name":"msg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that always errors with the given message.","text":"Gets a codec that always errors with the given message."}},{"name":"error","modifiers":["public","static"],"typeId":"<T>(java.lang.String,java.lang.String)com.mojang.serialization.Codec<T>","parameters":[{"name":"encodeMsg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"decodeMsg","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that always errors with the given messages.","text":"Gets a codec that always errors with the given messages."}},{"name":"option","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>)com.mojang.serialization.Codec<java.util.Optional<T>>","parameters":[{"name":"codec","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}}],"return":{"name":"com.mojang.serialization.Codec<java.util.Optional<T>>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that encodes an <ref cls=\"java/util/Optional\">Optional</ref> with a given child codec.","text":"Gets a codec that encodes an <ref cls=\"java/util/Optional\">Optional</ref> with a given child codec."}},{"name":"enumCodec","modifiers":["public","static"],"typeId":"<T>(java.lang.Class<T>)com.mojang.serialization.Codec<T>","parameters":[{"name":"clazz","type":{"name":"java.lang.Class<T>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"doc":{"summary":"Gets a codec that encodes an <ref cls=\"java/lang/Enum\">enum</ref> as a string.","text":"Gets a codec that encodes an <ref cls=\"java/lang/Enum\">enum</ref> as a string."}},{"name":"typeMapped","modifiers":["public","static"],"typeId":"<T>(org.moddingx.libx.codec.TypedEncoder<T,?>[])com.mojang.serialization.Codec<T>","parameters":[{"name":"encoders","type":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>[]","arrayOf":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"}}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"vararg":true,"doc":{"summary":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.","text":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.  If no <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> matches, an error will be returned."}},{"name":"typeMapped","modifiers":["public","static"],"typeId":"<T>(com.mojang.serialization.Codec<T>,org.moddingx.libx.codec.TypedEncoder<T,?>[])com.mojang.serialization.Codec<T>","parameters":[{"name":"fallback","type":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"}},{"name":"encoders","type":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>[]","arrayOf":{"name":"org.moddingx.libx.codec.TypedEncoder<T,?>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"}}}],"return":{"name":"com.mojang.serialization.Codec<T>","desc":"Lcom/mojang/serialization/Codec;","binaryName":"com/mojang/serialization/Codec"},"vararg":true,"doc":{"summary":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.","text":"Gets a type mapped codec that will try to encode and decode values with the first  matching <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref>.  If no <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> matches, the fallback is used."}}],"doc":{"summary":"Provides additional <ref cls=\"com/mojang/serialization/Codec\">codecs</ref>.","text":"Provides additional <ref cls=\"com/mojang/serialization/Codec\">codecs</ref>."}}

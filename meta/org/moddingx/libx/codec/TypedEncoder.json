{"name":"org/moddingx/libx/codec/TypedEncoder","simpleName":"TypedEncoder","sourceName":"org.moddingx.libx.codec.TypedEncoder","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"methods":[{"name":"resultClass","modifiers":["public","abstract"],"typeId":"()java.lang.Class<R>","parameters":[],"return":{"name":"java.lang.Class<R>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":{"summary":"Gets the class of elements this <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> can encode to.","text":"Gets the class of elements this <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> can encode to."}},{"name":"encode","modifiers":["public","abstract"],"typeId":"(T)com.mojang.serialization.DataResult<R>","parameters":[{"name":"value","type":{"name":"T","typeVar":"T"}}],"return":{"name":"com.mojang.serialization.DataResult<R>","desc":"Lcom/mojang/serialization/DataResult;","binaryName":"com/mojang/serialization/DataResult"},"doc":{"summary":"Encodes a value.","text":"Encodes a value."}},{"name":"decode","modifiers":["public","abstract"],"typeId":"(R)com.mojang.serialization.DataResult<T>","parameters":[{"name":"value","type":{"name":"R","typeVar":"R"}}],"return":{"name":"com.mojang.serialization.DataResult<T>","desc":"Lcom/mojang/serialization/DataResult;","binaryName":"com/mojang/serialization/DataResult"},"doc":{"summary":"Decodes a value.","text":"Decodes a value."}},{"name":"cast","modifiers":["public","default"],"typeId":"<N>(com.mojang.serialization.DynamicOps<N>)org.moddingx.libx.codec.TypedEncoder<T,N>","parameters":[{"name":"ops","type":{"name":"com.mojang.serialization.DynamicOps<N>","desc":"Lcom/mojang/serialization/DynamicOps;","binaryName":"com/mojang/serialization/DynamicOps"}}],"return":{"name":"org.moddingx.libx.codec.TypedEncoder<T,N>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"},"doc":{"summary":"Casts this <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> given some <ref cls=\"com/mojang/serialization/DynamicOps\">DynamicOps</ref>.","text":"Casts this <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> given some <ref cls=\"com/mojang/serialization/DynamicOps\">DynamicOps</ref>. Returns <code>null</code> if  the <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> can't be used on the given <ref cls=\"com/mojang/serialization/DynamicOps\">DynamicOps</ref>.  This can be overridden to better which <ref cls=\"com/mojang/serialization/DynamicOps\">DynamicOps</ref> an encoder accepts."}},{"name":"of","modifiers":["public","static"],"typeId":"<T,R>(java.lang.Class<R>,java.util.function.Function<? super T,? extends R>,java.util.function.Function<? super R,? extends T>)org.moddingx.libx.codec.TypedEncoder<T,R>","parameters":[{"name":"resultClass","type":{"name":"java.lang.Class<R>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}},{"name":"encoder","type":{"name":"java.util.function.Function<? super T,? extends R>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}},{"name":"decoder","type":{"name":"java.util.function.Function<? super R,? extends T>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}}],"return":{"name":"org.moddingx.libx.codec.TypedEncoder<T,R>","desc":"Lorg/moddingx/libx/codec/TypedEncoder;","binaryName":"org/moddingx/libx/codec/TypedEncoder"},"doc":{"summary":"Creates a new <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> given two functions to encode and decode an object.","text":"Creates a new <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> given two functions to encode and decode an object.  If a functions throws an exception, it is wrapped into an errored <ref cls=\"com/mojang/serialization/DataResult\">DataResult</ref>."}}],"doc":{"summary":"An encoder that can encode and decode elements of a specific type.","text":"An encoder that can encode and decode elements of a specific type.  This is used to create type mapped codecs that behave differently depending on the<br> <ref cls=\"com/mojang/serialization/DynamicOps\">DynamicOps</ref> they are used on.  A <ref cls=\"org/moddingx/libx/codec/TypedEncoder\">TypedEncoder</ref> is assumed to be able to encode and decode with every dynamic  ops whose <ref cls=\"com/mojang/serialization/DynamicOps\" method=\"empty\" type=\"()T\">empty</ref> element is a subclass of the class returned  by <ref cls=\"org/moddingx/libx/codec/TypedEncoder\" method=\"resultClass\" type=\"()java.lang.Class<R>\">#resultClass()</ref>."}}

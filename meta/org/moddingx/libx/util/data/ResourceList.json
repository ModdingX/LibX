{"name":"org/moddingx/libx/util/data/ResourceList","simpleName":"ResourceList","sourceName":"org.moddingx.libx.util.data.ResourceList","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"interfaces":[{"name":"java/util/function/Predicate","signature":"java.util.function.Predicate<net.minecraft.resources.ResourceLocation>","parameters":[{"name":"net/minecraft/resources/ResourceLocation","signature":"net.minecraft.resources.ResourceLocation","parameters":[]}]}],"fields":[{"name":"ALLOW_LIST","modifiers":["public","static","final"],"type":{"name":"org.moddingx.libx.util.data.ResourceList","desc":"Lorg/moddingx/libx/util/data/ResourceList;","binaryName":"org/moddingx/libx/util/data/ResourceList"},"doc":{"summary":"A resource list that accepts every item.","text":"A resource list that accepts every item."}},{"name":"DENY_LIST","modifiers":["public","static","final"],"type":{"name":"org.moddingx.libx.util.data.ResourceList","desc":"Lorg/moddingx/libx/util/data/ResourceList;","binaryName":"org/moddingx/libx/util/data/ResourceList"},"doc":{"summary":"A resource list that denies every item.","text":"A resource list that denies every item."}}],"constructors":[{"modifiers":["public"],"typeId":"(boolean,java.util.function.Consumer<org.moddingx.libx.util.data.ResourceList.RuleBuilder>)void","parameters":[{"name":"allowList","type":{"name":"boolean","desc":"Z"},"doc":"Whether this is an allow list or a deny list"},{"name":"rules","type":{"name":"java.util.function.Consumer<org.moddingx.libx.util.data.ResourceList.RuleBuilder>","desc":"Ljava/util/function/Consumer;","binaryName":"java/util/function/Consumer"},"doc":"A consumer that gets a <code>RuleBuilder</code> and should build the rules."}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Creates a new resource list.","text":"Creates a new resource list."}},{"modifiers":["public"],"typeId":"(com.google.gson.JsonObject)void","parameters":[{"name":"json","type":{"name":"com.google.gson.JsonObject","desc":"Lcom/google/gson/JsonObject;","binaryName":"com/google/gson/JsonObject"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Reads a resource list from JSON.","text":"Reads a resource list from JSON."}},{"modifiers":["public"],"typeId":"(net.minecraft.network.FriendlyByteBuf)void","parameters":[{"name":"buffer","type":{"name":"net.minecraft.network.FriendlyByteBuf","desc":"Lnet/minecraft/network/FriendlyByteBuf;","binaryName":"net/minecraft/network/FriendlyByteBuf"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Reads a resource list from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.","text":"Reads a resource list from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>."}}],"methods":[{"name":"toJson","modifiers":["public"],"typeId":"()com.google.gson.JsonObject","parameters":[],"return":{"name":"com.google.gson.JsonObject","desc":"Lcom/google/gson/JsonObject;","binaryName":"com/google/gson/JsonObject"},"doc":{"summary":"Serialises this resource list to JSON.","text":"Serialises this resource list to JSON."}},{"name":"toNetwork","modifiers":["public"],"typeId":"(net.minecraft.network.FriendlyByteBuf)void","parameters":[{"name":"buffer","type":{"name":"net.minecraft.network.FriendlyByteBuf","desc":"Lnet/minecraft/network/FriendlyByteBuf;","binaryName":"net/minecraft/network/FriendlyByteBuf"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Writes this resource list to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.","text":"Writes this resource list to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>."}},{"name":"isAllowList","modifiers":["public"],"typeId":"()boolean","parameters":[],"return":{"name":"boolean","desc":"Z"},"doc":{"summary":"Gets whether this ResourceList is an allow list or a deny list.","text":"Gets whether this ResourceList is an allow list or a deny list."}},{"name":"getRules","modifiers":["public"],"typeId":"()java.util.List<org.moddingx.libx.util.data.ResourceList.RuleEntry>","parameters":[],"return":{"name":"java.util.List<org.moddingx.libx.util.data.ResourceList.RuleEntry>","desc":"Ljava/util/List;","binaryName":"java/util/List"},"doc":{"summary":"Gets a list of <ref cls=\"org/moddingx/libx/util/data/ResourceList$RuleEntry\">rule entries</ref> for this ResourceList.","text":"Gets a list of <ref cls=\"org/moddingx/libx/util/data/ResourceList$RuleEntry\">rule entries</ref> for this ResourceList."}},{"name":"test","modifiers":["public"],"typeId":"(net.minecraft.resources.ResourceLocation)boolean","parameters":[{"name":"rl","type":{"name":"net.minecraft.resources.ResourceLocation","desc":"Lnet/minecraft/resources/ResourceLocation;","binaryName":"net/minecraft/resources/ResourceLocation"}}],"return":{"name":"boolean","desc":"Z"},"doc":{"summary":"Tests whether the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref> is on this resource list.","text":"Tests whether the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref> is on this resource list."}}],"doc":{"summary":"A <ref cls=\"java/util/function/Predicate\">Predicate</ref> for <ref cls=\"net/minecraft/resources/ResourceLocation\">resource locations</ref> implemented as  a list of rules that will be applied one after another.","text":"A <ref cls=\"java/util/function/Predicate\">Predicate</ref> for <ref cls=\"net/minecraft/resources/ResourceLocation\">resource locations</ref> implemented as  a list of rules that will be applied one after another. The first rule that matches<br> a resource location determines the result.  The resource list can either be a white list or a black list. If it is an allow list,<br> by default a matching rule will make the <ref cls=\"org/moddingx/libx/util/data/ResourceList\" method=\"test\" type=\"(net.minecraft.resources.ResourceLocation)boolean\">test</ref> function  return true. If it's a deny list it'll return false by default for matching rules.<br> For allow lists if no rule matches <code>false</code> is returned. For deny lists it's  <code>true</code>.  Rules on an allow list can also make the <code>test</code> method false and the other  way round.<br> The order of the rules is important. Rules that are added first will have a higher  priority and only the first matching rule will be applied.<br> Resource lists are immutable.  <br> <a name=\"use_resource_lists_in_configs\"></a>  <br> <h3>ResourceLists in LibX configs</h3>  <br> This explains, how a resource list is used inj a config. In the <code>allowList</code> field you can specify  whether all entries will be accepted by default or rejected.<br>   <code>elements</code> is an array of rules. Each resource location that is matched against this list, will  traverse these rules from top to bottom. The first rule that matches a resource location determines its result.<br>   Rules are resource locations, where asterisks (*) can be added to match any number of characters.<br> However, an asterisk can not match a colon. The nly exception to this is the single asterisk which matches  everything. When a rule is matched, it will yield the result specified in `allowList` as a result. To alter<br> this, add a plus (+) or a minus (-) in front of the rule. This will make it a allow or deny rule  respectively. You can also add regex rules. These are json objects with two keys: `allow` - a boolean that<br> specifies whether this is an allow or a deny rule and `regex` - which is a regex that must match the  resource location."}}

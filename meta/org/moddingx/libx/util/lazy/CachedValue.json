{"name":"org/moddingx/libx/util/lazy/CachedValue","simpleName":"CachedValue","sourceName":"org.moddingx.libx.util.lazy.CachedValue","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"constructors":[{"modifiers":["public"],"typeId":"(java.util.function.Supplier<? extends T>)void","parameters":[{"name":"supplier","type":{"name":"java.util.function.Supplier<? extends T>","desc":"Ljava/util/function/Supplier;","binaryName":"java/util/function/Supplier"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Creates a new cached value.","text":"Creates a new cached value."}}],"methods":[{"name":"get","modifiers":["public"],"typeId":"()T","parameters":[],"return":{"name":"T","typeVar":"T"},"doc":{"summary":"Gets the value.","text":"Gets the value. If currently invalid, computes the value."}},{"name":"copy","modifiers":["public"],"typeId":"()org.moddingx.libx.util.lazy.CachedValue<T>","parameters":[],"return":{"name":"org.moddingx.libx.util.lazy.CachedValue<T>","desc":"Lorg/moddingx/libx/util/lazy/CachedValue;","binaryName":"org/moddingx/libx/util/lazy/CachedValue"},"doc":{"summary":"Returns a new cached value.","text":"Returns a new cached value. If this cached value is currently valid, the new cached value  will include the currently valid value. After that both values can be invalidated independent<br> of each other."}},{"name":"invalidate","modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"},"doc":{"summary":"Invalidates the cached value.","text":"Invalidates the cached value."}}],"doc":{"summary":"A lazy value that is resolved when it is first used.","text":"A lazy value that is resolved when it is first used. However, this one can be invalidated,  which causes it to recompute the value next time."}}

{"name":"org/moddingx/libx/annotation/codec/PrimaryConstructor","simpleName":"PrimaryConstructor","sourceName":"org.moddingx.libx.annotation.codec.PrimaryConstructor","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"interfaces":[{"name":"java/lang/annotation/Annotation","signature":"java.lang.annotation.Annotation","parameters":[]}],"doc":{"summary":"This is used to create very simple Codecs for classes.","text":"This is used to create very simple Codecs for classes. It will always create  record codecs that fill values. Default values are not directly supported but<br> can be easily added by creating custom smaller sub-codecs.  <br> Can be added to a <ref cls=\"java/lang/Record\">record</ref> definition or exactly one constructor  in a class. The Codec will then be generated based on the parameters of that<br> record or constructor.  <br> To retrieve the codec, use the <code>Codecs</code> class.  <br> For each parameter, there must either be a public field with the same name,  a method with no arguments and the name of the parameter, or a java bean<br> styled getter method for the parameter name. This will then be used by the  codec for serialisation.<br>   For each parameter, ModInit attempts to generate a matching codec field.<br> There are multiple types of codec fields. Each of them has an annotation that  can be applied to disable auto-detection and force a specific type or to help<br> ModInit detect the type correctly.  <br> Currently the following field types are supported:  <br> <li>      <ul><ref cls=\"org/moddingx/libx/annotation/codec/Param\">Parameter Fields</ref>. These are the default for everything      that is not covered by a different type.</ul>  </li>"}}

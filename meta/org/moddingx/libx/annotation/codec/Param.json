{"name":"org/moddingx/libx/annotation/codec/Param","simpleName":"Param","sourceName":"org.moddingx.libx.annotation.codec.Param","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"interfaces":[{"name":"java/lang/annotation/Annotation","signature":"java.lang.annotation.Annotation","parameters":[]}],"methods":[{"name":"value","modifiers":["public","abstract"],"typeId":"()java.lang.Class<?>","parameters":[],"return":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":{"summary":"Class where to find the codec field.","text":"Class where to find the codec field. Can be left empty to use the class of  the parameter type."}},{"name":"field","modifiers":["public","abstract"],"typeId":"()java.lang.String","parameters":[],"return":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"},"doc":{"summary":"Field name of the codec field.","text":"Field name of the codec field. Can be left empty to use the default value  ModInit looks for."}}],"doc":{"summary":"The parameter codec field type will try to store and load a parameter based on a  different codec.","text":"The parameter codec field type will try to store and load a parameter based on a  different codec. For that it needs to find a matching codec to use.<br>  It will search for them in this order by default:<br>  <ul>      <li>Look for a default codec provided by DataFixerUpper</li>      <li>Try to find a matching <code>public static</code> field in the class of the      parameter type with the name <code>CODEC</code> or <code>DIRECT_CODEC</code>.</li>  </ul> <br> You can customise the class and field name to look after a codec using this  annotation. By this you can create default values easily by creating a class<br> with a field named <code>CODEC</code> that holds a codec for a value and adds a  default to it."}}

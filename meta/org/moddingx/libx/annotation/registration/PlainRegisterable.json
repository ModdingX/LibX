{"name":"org/moddingx/libx/annotation/registration/PlainRegisterable","simpleName":"PlainRegisterable","sourceName":"org.moddingx.libx.annotation.registration.PlainRegisterable","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"interfaces":[{"name":"java/lang/annotation/Annotation","signature":"java.lang.annotation.Annotation","parameters":[]}],"doc":{"summary":"This annotation can be added to a class to instruct ModInit to always register instances of that class without  a registry and don't check the element type.","text":"This annotation can be added to a class to instruct ModInit to always register instances of that class without  a registry and don't check the element type. Note that this annotation is disallowed on interfaces. <b>Also note  that it's insufficient that the value assigned to a field has this annotation, it must be present on the fields<br> type.</b> Suppose a class <code>A</code> with <code>@PlainRegisterable</code>. The following field declaration will work:  <br> <pre>  <code>  public static final A value = new A();<br> </code>  </pre>  <br> while this field declaration won't:  <br> <pre>  <code>  public static final <ref cls=\"java/lang/Object\">Object</ref> value = new A();  </code>  </pre>  <br> as in this case the field type is <ref cls=\"java/lang/Object\">Object</ref> which is not annotated with <code>@PlainRegisterable</code>."}}

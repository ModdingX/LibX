{
  "name": "io/github/noeppi_noeppi/libx/util/ResourceList",
  "simpleName": "ResourceList",
  "sourceNam": "io.github.noeppi_noeppi.libx.util.ResourceList",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "interfaces": [
    {
      "name": "java/util/function/Predicate",
      "signature": "java.util.function.Predicate<net.minecraft.resources.ResourceLocation>",
      "parameters": [
        {
          "name": "net/minecraft/resources/ResourceLocation",
          "signature": "net.minecraft.resources.ResourceLocation",
          "parameters": []
        }
      ]
    }
  ],
  "fields": [
    {
      "name": "WHITELIST",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList"
      },
      "doc": {
        "summary": "A resource list that accepts every item.",
        "text": "A resource list that accepts every item.",
        "properties": []
      }
    },
    {
      "name": "BLACKLIST",
      "modifiers": [
        "public",
        "static",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList"
      },
      "doc": {
        "summary": "A resource list that denies every item.",
        "text": "A resource list that denies every item.",
        "properties": []
      }
    },
    {
      "name": "NAMESPACE_MC",
      "modifiers": [
        "private",
        "static",
        "final"
      ],
      "type": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList.WildcardString",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList$WildcardString;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList$WildcardString"
      }
    },
    {
      "name": "whitelist",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "boolean",
        "desc": "Z"
      }
    },
    {
      "name": "rules",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.List<io.github.noeppi_noeppi.libx.util.ResourceList.Rule>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(boolean,java.util.function.Consumer<io.github.noeppi_noeppi.libx.util.ResourceList.RuleBuilder>)void",
      "parameters": [
        {
          "name": "whitelist",
          "type": {
            "name": "boolean",
            "desc": "Z"
          },
          "doc": "Whether this is a whitelist or a blacklist"
        },
        {
          "name": "rules",
          "type": {
            "name": "java.util.function.Consumer<io.github.noeppi_noeppi.libx.util.ResourceList.RuleBuilder>",
            "desc": "Ljava/util/function/Consumer;",
            "binaryName": "java/util/function/Consumer"
          },
          "doc": "A consumer that gets a <code>RuleBuilder</code> and should build the rules."
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Creates a new resource list.",
        "text": "Creates a new resource list.",
        "properties": []
      }
    },
    {
      "modifiers": [
        "public"
      ],
      "type": "(com.google.gson.JsonObject)void",
      "parameters": [
        {
          "name": "json",
          "type": {
            "name": "com.google.gson.JsonObject",
            "desc": "Lcom/google/gson/JsonObject;",
            "binaryName": "com/google/gson/JsonObject"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Reads a resource list from JSON.",
        "text": "Reads a resource list from JSON.",
        "properties": []
      }
    },
    {
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.network.FriendlyByteBuf)void",
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "net.minecraft.network.FriendlyByteBuf",
            "desc": "Lnet/minecraft/network/FriendlyByteBuf;",
            "binaryName": "net/minecraft/network/FriendlyByteBuf"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Reads a resource list from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.",
        "text": "Reads a resource list from a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.",
        "properties": []
      }
    }
  ],
  "methods": [
    {
      "name": "toJson",
      "modifiers": [
        "public"
      ],
      "type": "()com.google.gson.JsonObject",
      "parameters": [],
      "return": {
        "name": "com.google.gson.JsonObject",
        "desc": "Lcom/google/gson/JsonObject;",
        "binaryName": "com/google/gson/JsonObject"
      },
      "throws": [],
      "doc": {
        "summary": "Serialises this resource list to JSON.",
        "text": "Serialises this resource list to JSON.",
        "properties": []
      }
    },
    {
      "name": "toNetwork",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.network.FriendlyByteBuf)void",
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "net.minecraft.network.FriendlyByteBuf",
            "desc": "Lnet/minecraft/network/FriendlyByteBuf;",
            "binaryName": "net/minecraft/network/FriendlyByteBuf"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Writes this resource list to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.",
        "text": "Writes this resource list to a <ref cls=\"net/minecraft/network/FriendlyByteBuf\">FriendlyByteBuf</ref>.",
        "properties": []
      }
    },
    {
      "name": "isWhitelist",
      "modifiers": [
        "public"
      ],
      "type": "()boolean",
      "parameters": [],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Gets whether this ResourceList is a whitelist or a blacklist.",
        "text": "Gets whether this ResourceList is a whitelist or a blacklist.",
        "properties": []
      }
    },
    {
      "name": "getRules",
      "modifiers": [
        "public"
      ],
      "type": "()java.util.List<io.github.noeppi_noeppi.libx.util.ResourceList.RuleEntry>",
      "parameters": [],
      "return": {
        "name": "java.util.List<io.github.noeppi_noeppi.libx.util.ResourceList.RuleEntry>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      },
      "throws": [],
      "doc": {
        "summary": "Gets a list of <ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList$RuleEntry\">rule entries</ref> for this ResourceList.",
        "text": "Gets a list of <ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList$RuleEntry\">rule entries</ref> for this ResourceList.",
        "properties": []
      }
    },
    {
      "name": "test",
      "modifiers": [
        "public"
      ],
      "type": "(net.minecraft.resources.ResourceLocation)boolean",
      "parameters": [
        {
          "name": "rl",
          "type": {
            "name": "net.minecraft.resources.ResourceLocation",
            "desc": "Lnet/minecraft/resources/ResourceLocation;",
            "binaryName": "net/minecraft/resources/ResourceLocation"
          }
        }
      ],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": [],
      "doc": {
        "summary": "Tests whether the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref> is on this resource list.",
        "text": "Tests whether the given <ref cls=\"net/minecraft/resources/ResourceLocation\">ResourceLocation</ref> is on this resource list.",
        "properties": []
      }
    },
    {
      "name": "parseRule",
      "modifiers": [
        "private"
      ],
      "type": "(com.google.gson.JsonElement)io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
      "parameters": [
        {
          "name": "json",
          "type": {
            "name": "com.google.gson.JsonElement",
            "desc": "Lcom/google/gson/JsonElement;",
            "binaryName": "com/google/gson/JsonElement"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList$Rule;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList$Rule"
      },
      "throws": []
    },
    {
      "name": "ruleFromNetwork",
      "modifiers": [
        "private"
      ],
      "type": "(net.minecraft.network.FriendlyByteBuf)io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
      "parameters": [
        {
          "name": "buffer",
          "type": {
            "name": "net.minecraft.network.FriendlyByteBuf",
            "desc": "Lnet/minecraft/network/FriendlyByteBuf;",
            "binaryName": "net/minecraft/network/FriendlyByteBuf"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList$Rule;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList$Rule"
      },
      "throws": []
    },
    {
      "name": "parseSimpleRule",
      "modifiers": [
        "private"
      ],
      "type": "(java.lang.String)io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.util.ResourceList.Rule",
        "desc": "Lio/github/noeppi_noeppi/libx/util/ResourceList$Rule;",
        "binaryName": "io/github/noeppi_noeppi/libx/util/ResourceList$Rule"
      },
      "throws": []
    },
    {
      "name": "parseString",
      "modifiers": [
        "private",
        "static"
      ],
      "type": "(java.lang.String)java.util.List<java.lang.String>",
      "parameters": [
        {
          "name": "str",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        }
      ],
      "return": {
        "name": "java.util.List<java.lang.String>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      },
      "throws": []
    }
  ],
  "doc": {
    "summary": "A <ref cls=\"java/util/function/Predicate\">Predicate</ref> for <ref cls=\"net/minecraft/resources/ResourceLocation\">resource locations</ref> implemented as<br> a list of rules that will be applied one after another.",
    "text": "A <ref cls=\"java/util/function/Predicate\">Predicate</ref> for <ref cls=\"net/minecraft/resources/ResourceLocation\">resource locations</ref> implemented as<br> a list of rules that will be applied one after another. The first rule that matches<br> a resource location determines the result.<br> The resource list can either be a white list or a black list. If it is a whitelist,<br> by default a matching rule will make the <ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList\" method=\"test\" type=\"(net.minecraft.resources.ResourceLocation)boolean\">test</ref> function<br> return true. If it's a blacklist it'll return false by default for matching rules.<br> For whitelists if no rule matches <code>false</code> is returned. For blacklists it's<br> <code>true</code>.<br> Rules on a whitelist can also make the <code>test</code> method false and the other<br> way round.<br> The order of the rules is important. Rules that are added first will have a higher<br> priority and only the first matching rule will be applied.<br> Resource lists are immutable.<br> <br> <a name=\"use_resource_lists_in_configs\"></a><br> <br> <h3>ResourceLists in LibX configs</h3><br> <br> This explains, how a resource list is used inj a config. In the <code>whitelist</code> field you can specify<br> whether all entries will be accepted by default or rejected.<br> <br> <code>elements</code> is an array of rules. Each resource location that is matched against this list, will<br> traverse these rules from top to bottom. The first rule that matches a resource location determines its result.<br> <br> Rules are resource locations, where asterisks (*) can be added to match any number of characters.<br> However, an asterisk can not match a colon. The nly exception to this is the single asterisk which matches<br> everything. When a rule is matched, it will yield the result specified in `whitelist` as a result. To alter<br> this, add a plus (+) or a minus (-) in front of the rule. This will make it a whitelist or blacklist rule<br> respectively. You can also add regex rules. These are json objects with two keys: `allow` - a boolean that<br> specifies whether this is a whitelist or blacklist rule and `regex` - which is a regex that must match the<br> resource location.",
    "properties": []
  }
}

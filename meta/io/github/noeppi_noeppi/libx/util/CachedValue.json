{
  "name": "io/github/noeppi_noeppi/libx/util/CachedValue",
  "simpleName": "CachedValue",
  "sourceNam": "io.github.noeppi_noeppi.libx.util.CachedValue",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "supplier",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.function.Supplier<? extends T>",
        "desc": "Ljava/util/function/Supplier;",
        "binaryName": "java/util/function/Supplier"
      }
    },
    {
      "name": "value",
      "modifiers": [
        "private"
      ],
      "type": {
        "name": "T",
        "typeVar": "T"
      }
    },
    {
      "name": "valid",
      "modifiers": [
        "private"
      ],
      "type": {
        "name": "boolean",
        "desc": "Z"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(java.util.function.Supplier<? extends T>)void",
      "parameters": [
        {
          "name": "supplier",
          "type": {
            "name": "java.util.function.Supplier<? extends T>",
            "desc": "Ljava/util/function/Supplier;",
            "binaryName": "java/util/function/Supplier"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Creates a new cached value.",
        "text": "Creates a new cached value.",
        "properties": []
      }
    }
  ],
  "methods": [
    {
      "name": "get",
      "modifiers": [
        "public"
      ],
      "type": "()T",
      "parameters": [],
      "return": {
        "name": "T",
        "typeVar": "T"
      },
      "throws": [],
      "doc": {
        "summary": "Gets the value.",
        "text": "Gets the value. If currently invalid, computes the value.",
        "properties": []
      }
    },
    {
      "name": "invalidate",
      "modifiers": [
        "public"
      ],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": [],
      "doc": {
        "summary": "Invalidates the cached value.",
        "text": "Invalidates the cached value.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "A lazy value that is resolved when it is first used.",
    "text": "A lazy value that is resolved when it is first used. However, this one can be invalidated,<br> which causes it to recompute the value next time.",
    "properties": []
  }
}

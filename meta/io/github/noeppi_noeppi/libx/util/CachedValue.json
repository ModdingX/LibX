{"name":"io/github/noeppi_noeppi/libx/util/CachedValue","simpleName":"CachedValue","sourceName":"io.github.noeppi_noeppi.libx.util.CachedValue","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"constructors":[{"modifiers":["public"],"typeId":"(java.util.function.Supplier<? extends T>)void","parameters":[{"name":"supplier","type":{"name":"java.util.function.Supplier<? extends T>","desc":"Ljava/util/function/Supplier;","binaryName":"java/util/function/Supplier"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Creates a new cached value.","text":"Creates a new cached value."}}],"methods":[{"name":"get","modifiers":["public"],"typeId":"()T","parameters":[],"return":{"name":"T","typeVar":"T"},"doc":{"summary":"Gets the value.","text":"Gets the value. If currently invalid, computes the value."}},{"name":"invalidate","modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"},"doc":{"summary":"Invalidates the cached value.","text":"Invalidates the cached value."}}],"doc":{"summary":"A lazy value that is resolved when it is first used.","text":"A lazy value that is resolved when it is first used. However, this one can be invalidated,  which causes it to recompute the value next time."}}

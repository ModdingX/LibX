{
  "name": "io/github/noeppi_noeppi/libx/util/ResourceList$RuleEntry",
  "simpleName": "RuleEntry",
  "sourceNam": "io.github.noeppi_noeppi.libx.util.ResourceList.RuleEntry",
  "modifiers": [
    "public",
    "static",
    "final"
  ],
  "nesting": "member",
  "superClass": {
    "name": "java/lang/Record",
    "signature": "java.lang.Record",
    "parameters": []
  },
  "fields": [
    {
      "name": "value",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      }
    },
    {
      "name": "regex",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "boolean",
        "desc": "Z"
      }
    },
    {
      "name": "allow",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.lang.Boolean",
        "desc": "Ljava/lang/Boolean;",
        "binaryName": "java/lang/Boolean"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [
        "public"
      ],
      "type": "(java.lang.String,boolean,java.lang.Boolean)void",
      "parameters": [
        {
          "name": "value",
          "type": {
            "name": "java.lang.String",
            "desc": "Ljava/lang/String;",
            "binaryName": "java/lang/String"
          }
        },
        {
          "name": "regex",
          "type": {
            "name": "boolean",
            "desc": "Z"
          }
        },
        {
          "name": "allow",
          "type": {
            "name": "java.lang.Boolean",
            "desc": "Ljava/lang/Boolean;",
            "binaryName": "java/lang/Boolean"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "toString",
      "modifiers": [
        "public",
        "final"
      ],
      "type": "()java.lang.String",
      "parameters": [],
      "return": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      },
      "throws": []
    },
    {
      "name": "hashCode",
      "modifiers": [
        "public",
        "final"
      ],
      "type": "()int",
      "parameters": [],
      "return": {
        "name": "int",
        "desc": "I"
      },
      "throws": []
    },
    {
      "name": "equals",
      "modifiers": [
        "public",
        "final"
      ],
      "type": "(java.lang.Object)boolean",
      "parameters": [
        {
          "name": "o",
          "type": {
            "name": "java.lang.Object",
            "desc": "Ljava/lang/Object;",
            "binaryName": "java/lang/Object"
          }
        }
      ],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": []
    },
    {
      "name": "value",
      "modifiers": [
        "public"
      ],
      "type": "()java.lang.String",
      "parameters": [],
      "return": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      },
      "throws": []
    },
    {
      "name": "regex",
      "modifiers": [
        "public"
      ],
      "type": "()boolean",
      "parameters": [],
      "return": {
        "name": "boolean",
        "desc": "Z"
      },
      "throws": []
    },
    {
      "name": "allow",
      "modifiers": [
        "public"
      ],
      "type": "()java.lang.Boolean",
      "parameters": [],
      "return": {
        "name": "java.lang.Boolean",
        "desc": "Ljava/lang/Boolean;",
        "binaryName": "java/lang/Boolean"
      },
      "throws": []
    }
  ],
  "doc": {
    "summary": "And entry that represents a rule in this <ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList\">ResourceList</ref>.",
    "text": "And entry that represents a rule in this <ref cls=\"io/github/noeppi_noeppi/libx/util/ResourceList\">ResourceList</ref>.<br> This is only meant to give access to the values in a resource list, it can't<br> be used to build new rules.",
    "properties": []
  }
}

{"name":"io/github/noeppi_noeppi/libx/config/correct/ConfigCorrection","simpleName":"ConfigCorrection","sourceName":"io.github.noeppi_noeppi.libx.config.correct.ConfigCorrection","modifiers":["public","abstract"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"methods":[{"name":"tryGet","modifiers":["public","abstract"],"typeId":"<U>(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>)java.util.Optional<U>","parameters":[{"name":"json","type":{"name":"com.google.gson.JsonElement","desc":"Lcom/google/gson/JsonElement;","binaryName":"com/google/gson/JsonElement"}},{"name":"mapper","type":{"name":"io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>","desc":"Lio/github/noeppi_noeppi/libx/config/ValueMapper;","binaryName":"io/github/noeppi_noeppi/libx/config/ValueMapper"}}],"return":{"name":"java.util.Optional<U>","desc":"Ljava/util/Optional;","binaryName":"java/util/Optional"},"doc":{"summary":"Tries to get a value from a piece of json given a matching value mapper.","text":"Tries to get a value from a piece of json given a matching value mapper. This should be  used if there's no way to get a default value in any way.","properties":[{"text":"The corrected value for the given json or an empty option if it could not be corrected.","type":"return"}]}},{"name":"correct","modifiers":["public","default"],"typeId":"<U>(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>,java.util.function.Function<T,U>)java.util.Optional<U>","parameters":[{"name":"json","type":{"name":"com.google.gson.JsonElement","desc":"Lcom/google/gson/JsonElement;","binaryName":"com/google/gson/JsonElement"}},{"name":"mapper","type":{"name":"io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>","desc":"Lio/github/noeppi_noeppi/libx/config/ValueMapper;","binaryName":"io/github/noeppi_noeppi/libx/config/ValueMapper"}},{"name":"extractor","type":{"name":"java.util.function.Function<T,U>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}}],"return":{"name":"java.util.Optional<U>","desc":"Ljava/util/Optional;","binaryName":"java/util/Optional"},"doc":{"summary":"Tries to get a value from a piece of json given a matching value mapper and a function to  extract a default value for the value that this method should retrieve when given a default<br> value for this config value.","text":"Tries to get a value from a piece of json given a matching value mapper and a function to  extract a default value for the value that this method should retrieve when given a default<br> value for this config value.  <br> For example when a <ref cls=\"org/apache/commons/lang3/tuple/Pair\">Pair</ref> is corrected and it find an array with two elements, it would  do something like <code>correct(jsonArray.get(0), firstMapper, Pair::getLeft);</code> to correct  the first value from the pair.<br>   Set json to null if you can't get a matching piece of json in any case.","properties":[{"text":"The corrected value for the given json or an empty option if it could not be corrected.","type":"return"}]}},{"name":"tryCorrect","modifiers":["public","abstract"],"typeId":"<U>(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>,java.util.function.Function<T,java.util.Optional<U>>)java.util.Optional<U>","parameters":[{"name":"json","type":{"name":"com.google.gson.JsonElement","desc":"Lcom/google/gson/JsonElement;","binaryName":"com/google/gson/JsonElement"}},{"name":"mapper","type":{"name":"io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>","desc":"Lio/github/noeppi_noeppi/libx/config/ValueMapper;","binaryName":"io/github/noeppi_noeppi/libx/config/ValueMapper"}},{"name":"extractor","type":{"name":"java.util.function.Function<T,java.util.Optional<U>>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}}],"return":{"name":"java.util.Optional<U>","desc":"Ljava/util/Optional;","binaryName":"java/util/Optional"},"doc":{"summary":"Same as <ref cls=\"io/github/noeppi_noeppi/libx/config/correct/ConfigCorrection\" method=\"correct\" type=\"<U>(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>,java.util.function.Function<T,U>)java.util.Optional<U>\">#correct(JsonElement, ValueMapper, Function)</ref> but with an extractor that returns  an <ref cls=\"java/util/Optional\">Optional</ref>.","text":"Same as <ref cls=\"io/github/noeppi_noeppi/libx/config/correct/ConfigCorrection\" method=\"correct\" type=\"<U>(com.google.gson.JsonElement,io.github.noeppi_noeppi.libx.config.ValueMapper<U,?>,java.util.function.Function<T,U>)java.util.Optional<U>\">#correct(JsonElement, ValueMapper, Function)</ref> but with an extractor that returns  an <ref cls=\"java/util/Optional\">Optional</ref>. It should return an empty optional to mark that there's no default value available  or a filled optional with an appropriate default value."}},{"name":"check","modifiers":["public","static"],"typeId":"<X,R>(java.util.function.Predicate<X>,java.util.function.Function<X,R>)java.util.function.Function<X,java.util.Optional<R>>","parameters":[{"name":"present","type":{"name":"java.util.function.Predicate<X>","desc":"Ljava/util/function/Predicate;","binaryName":"java/util/function/Predicate"}},{"name":"result","type":{"name":"java.util.function.Function<X,R>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"}}],"return":{"name":"java.util.function.Function<X,java.util.Optional<R>>","desc":"Ljava/util/function/Function;","binaryName":"java/util/function/Function"},"doc":{"summary":"Gets a <ref cls=\"java/util/function/Function\">Function</ref> that first passes the argument to the given <ref cls=\"java/util/function/Predicate\">Predicate</ref> to check  whether a value is available.","text":"Gets a <ref cls=\"java/util/function/Function\">Function</ref> that first passes the argument to the given <ref cls=\"java/util/function/Predicate\">Predicate</ref> to check  whether a value is available. If a value is available, uses the given <ref cls=\"java/util/function/Function\">Function</ref> to compute  the result. If the predicate returns <code>false</code>, the returned <ref cls=\"java/util/Optional\">Optional</ref> will be empty."}}],"doc":{"summary":"An instance of this interface is passed when a config is corrected.","text":"An instance of this interface is passed when a config is corrected. It can be used to best  restore matching parts of the config."}}

{
  "name": "io/github/noeppi_noeppi/libx/annotation/codec/Param",
  "simpleName": "Param",
  "sourceNam": "io.github.noeppi_noeppi.libx.annotation.codec.Param",
  "modifiers": [
    "public",
    "abstract"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "interfaces": [
    {
      "name": "java/lang/annotation/Annotation",
      "signature": "java.lang.annotation.Annotation",
      "parameters": []
    }
  ],
  "methods": [
    {
      "name": "value",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()java.lang.Class<?>",
      "parameters": [],
      "return": {
        "name": "java.lang.Class<?>",
        "desc": "Ljava/lang/Class;",
        "binaryName": "java/lang/Class"
      },
      "throws": [],
      "doc": {
        "summary": "Class where to find the codec field.",
        "text": "Class where to find the codec field. Can be left empty to use the class of<br> the parameter type.",
        "properties": []
      }
    },
    {
      "name": "field",
      "modifiers": [
        "public",
        "abstract"
      ],
      "type": "()java.lang.String",
      "parameters": [],
      "return": {
        "name": "java.lang.String",
        "desc": "Ljava/lang/String;",
        "binaryName": "java/lang/String"
      },
      "throws": [],
      "doc": {
        "summary": "Field name of the codec field.",
        "text": "Field name of the codec field. Can be left empty to use the default value<br> ModInit looks for.",
        "properties": []
      }
    }
  ],
  "doc": {
    "summary": "The parameter codec field type will try to store and load a parameter based on a<br> different <ref cls=\"com/mojang/serialization/Codec\">codec</ref>.",
    "text": "The parameter codec field type will try to store and load a parameter based on a<br> different <ref cls=\"com/mojang/serialization/Codec\">codec</ref>. For that it needs to find a matching codec to use.<br> <br> It will search  for them in this order by default:<br> <br> <ul><br>     <li>Look for a default codec provided by DataFixerUpper</li><br>     <li>Try to find a matching <code>public static</code> field in the class of the<br>     parameter type with the name <code>CODEC</code> or <code>DIRECT_CODEC</code>.</li><br> </ul><br> <br> You can customise the class and field name to look after a codec using this<br> annotation. By this you can create default values easily by creating a class<br> with a field named <code>CODEC</code> that holds a codec for a value and adds a<br> default to it.",
    "properties": []
  }
}

{"name":"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration","simpleName":"ModXRegistration","sourceName":"io.github.noeppi_noeppi.libx.mod.registration.ModXRegistration","modifiers":["public","abstract"],"superClass":{"name":"io/github/noeppi_noeppi/libx/mod/ModX","signature":"io.github.noeppi_noeppi.libx.mod.ModX","parameters":[]},"constructors":[{"modifiers":["protected"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"}},{"modifiers":["protected"],"typeId":"(net.minecraft.world.item.CreativeModeTab)void","parameters":[{"name":"tab","type":{"name":"net.minecraft.world.item.CreativeModeTab","desc":"Lnet/minecraft/world/item/CreativeModeTab;","binaryName":"net/minecraft/world/item/CreativeModeTab"}}],"return":{"name":"void","desc":"V"}}],"methods":[{"name":"addRegistrationHandler","modifiers":["public","final"],"typeId":"(java.lang.Runnable)void","parameters":[{"name":"handler","type":{"name":"java.lang.Runnable","desc":"Ljava/lang/Runnable;","binaryName":"java/lang/Runnable"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Adds a registration handler.","text":"Adds a registration handler. Should be called only in constructor. See class description for more info."}},{"name":"register","modifiers":["public","final"],"typeId":"(java.lang.String,java.lang.Object)void","parameters":[{"name":"id","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"obj","type":{"name":"java.lang.Object","desc":"Ljava/lang/Object;","binaryName":"java/lang/Object"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"Registers an object with a given id.","text":"Registers an object with a given id. The id must be a valid ResourceLocation path. It's automatically  prefixed with the mod id."}},{"name":"initRegistration","modifiers":["protected","abstract"],"typeId":"(io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder)void","parameters":[{"name":"builder","type":{"name":"io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder","desc":"Lio/github/noeppi_noeppi/libx/mod/registration/RegistrationBuilder;","binaryName":"io/github/noeppi_noeppi/libx/mod/registration/RegistrationBuilder"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"This is called from the <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration\">ModXRegistration</ref> constructor.","text":"This is called from the <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration\">ModXRegistration</ref> constructor. It is used to configure the registration  system for this mod with the given builder. In all cases, you must set the version of the registration<br> system to be used for this mod, or it will fail."}}],"doc":{"summary":"You should extends this instead of <ref cls=\"io/github/noeppi_noeppi/libx/mod/ModX\">ModX</ref> if you want to use the LibX registration system.","text":"You should extends this instead of <ref cls=\"io/github/noeppi_noeppi/libx/mod/ModX\">ModX</ref> if you want to use the LibX registration system.  <br> This works like this:  <br> You define your objects for registration in classes like <code>ModItems</code>. Create some static methods  there that register all the items. To register something you need to call<br> <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration\" method=\"register\" type=\"(java.lang.String,java.lang.Object)void\">ModXRegistration#register(String, Object)</ref>. The in the constructor of you mod class you call  <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration\" method=\"addRegistrationHandler\" type=\"(java.lang.Runnable)void\">ModXRegistration#addRegistrationHandler(Runnable)</ref> for every registration method with a method  reference to it. (Example: <code>addRegistrationHandler(ModItems::init)</code>. The handlers will get called  in the order you added them.<br>   This system has several advantages over the one recommended by forge:<br>   <ul>      <li>An object can have dependencies that are automatically registered with it. This is done with      the <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/Registerable\">Registerable</ref> interface. For example <ref cls=\"io/github/noeppi_noeppi/libx/base/tile/BlockBE\">BlockBE</ref> registers a <ref cls=\"net/minecraft/world/level/block/Block\">block</ref>,      an <ref cls=\"net/minecraft/world/item/Item\">item</ref> for the block and a <ref cls=\"net/minecraft/world/level/block/entity/BlockEntityType\">block entity type</ref>. You could even      go further with it and automatically register slabs, stairs, walls and doors for all of your<br>     decorative blocks.</li>      <li>There's way less code you need to write.</li>      <li>You don't need the <code>.get()</code> when you want to access a registration object</li>  </ul>  <br> So you might want to know what exactly can be registered with this system. You can register everything  that has a forge registry such as items, block, biomes, enchantments... And if other mods add things<br> to register via forge registries you can register those as well. Another thing you can register are  thing that implement <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/Registerable\">Registerable</ref>. See there for more info.  <br> With registry transformers you can register literally everything. See <ref cls=\"io/github/noeppi_noeppi/libx/mod/registration/ModXRegistration\" method=\"initRegistration\" type=\"(io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder)void\">#initRegistration(RegistrationBuilder)</ref>  for more information about registry conditions and transformers."}}

{
  "name": "io/github/noeppi_noeppi/libx/mod/registration/RegistrationBuilder",
  "simpleName": "RegistrationBuilder",
  "sourceNam": "io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder",
  "modifiers": [
    "public"
  ],
  "superClass": {
    "name": "java/lang/Object",
    "signature": "java.lang.Object",
    "parameters": []
  },
  "fields": [
    {
      "name": "version",
      "modifiers": [
        "private"
      ],
      "type": {
        "name": "int",
        "desc": "I"
      }
    },
    {
      "name": "customConditions",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.List<io.github.noeppi_noeppi.libx.mod.registration.RegistryCondition>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      }
    },
    {
      "name": "customTransformers",
      "modifiers": [
        "private",
        "final"
      ],
      "type": {
        "name": "java.util.List<io.github.noeppi_noeppi.libx.mod.registration.RegistryTransformer>",
        "desc": "Ljava/util/List;",
        "binaryName": "java/util/List"
      }
    }
  ],
  "constructors": [
    {
      "modifiers": [],
      "type": "()void",
      "parameters": [],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    }
  ],
  "methods": [
    {
      "name": "setVersion",
      "modifiers": [
        "public"
      ],
      "type": "(int)void",
      "parameters": [
        {
          "name": "version",
          "type": {
            "name": "int",
            "desc": "I"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    },
    {
      "name": "addCondition",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.mod.registration.RegistryCondition)void",
      "parameters": [
        {
          "name": "condition",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.mod.registration.RegistryCondition",
            "desc": "Lio/github/noeppi_noeppi/libx/mod/registration/RegistryCondition;",
            "binaryName": "io/github/noeppi_noeppi/libx/mod/registration/RegistryCondition"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    },
    {
      "name": "addTransformer",
      "modifiers": [
        "public"
      ],
      "type": "(io.github.noeppi_noeppi.libx.mod.registration.RegistryTransformer)void",
      "parameters": [
        {
          "name": "transformer",
          "type": {
            "name": "io.github.noeppi_noeppi.libx.mod.registration.RegistryTransformer",
            "desc": "Lio/github/noeppi_noeppi/libx/mod/registration/RegistryTransformer;",
            "binaryName": "io/github/noeppi_noeppi/libx/mod/registration/RegistryTransformer"
          }
        }
      ],
      "return": {
        "name": "void",
        "desc": "V"
      },
      "throws": []
    },
    {
      "name": "build",
      "modifiers": [
        "public"
      ],
      "type": "()io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder.RegistrationSettings",
      "parameters": [],
      "return": {
        "name": "io.github.noeppi_noeppi.libx.mod.registration.RegistrationBuilder.RegistrationSettings",
        "desc": "Lio/github/noeppi_noeppi/libx/mod/registration/RegistrationBuilder$RegistrationSettings;",
        "binaryName": "io/github/noeppi_noeppi/libx/mod/registration/RegistrationBuilder$RegistrationSettings"
      },
      "throws": []
    }
  ],
  "doc": {
    "summary": "A registration builder is used to configure the registration system for a mod.",
    "text": "A registration builder is used to configure the registration system for a mod.<br> You must set the version of the registration system that is used for your mod here.<br> This is because LibX keeps adding new registry transformers in newer versions. However<br> these my break mods that are not made for it. That's why you'll need to set the version.<br> LibX will then only load its transformers made for that version.<br> <br> You can also add custom conditions and transformers that are used for you registration.<br> <br> <b>The current LibX registration version is 1.</b><br> <br> By setting the version to 0, you disable all registry transformers by LibX.<br> <br> The transformers added by LibX may also replace the object registered. If they do so, the<br> original object is passed to the conditions (as every other object) but not to custom<br> transformers. If a LibX transformer replaced objects, it printed <i>italic</i> in the list<br> below.<br> <br> Registry transformers added in version <b>1</b>:<br> <ul><br>     <li><i>A transformer that translates every <code>IDataSerializer</code> into a DataSerializerEntry<br>     which is a subclass of ForgeRegistryEntry which means it can be registered directly to a forge<br>     registry.</i></li><br> </ul>",
    "properties": []
  }
}

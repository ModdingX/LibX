{"name":"io/github/noeppi_noeppi/libx/command/CommandUtil","simpleName":"CommandUtil","sourceName":"io.github.noeppi_noeppi.libx.command.CommandUtil","modifiers":["public"],"superClass":{"name":"java/lang/Object","signature":"java.lang.Object","parameters":[]},"constructors":[{"modifiers":["public"],"typeId":"()void","parameters":[],"return":{"name":"void","desc":"V"}}],"methods":[{"name":"registerGenericCommandArgument","modifiers":["public","static"],"typeId":"(java.lang.String,java.lang.Class<?>,net.minecraft.commands.synchronization.ArgumentSerializer<?>)void","parameters":[{"name":"name","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"}},{"name":"clazz","type":{"name":"java.lang.Class<?>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"}},{"name":"ias","type":{"name":"net.minecraft.commands.synchronization.ArgumentSerializer<?>","desc":"Lnet/minecraft/commands/synchronization/ArgumentSerializer;","binaryName":"net/minecraft/commands/synchronization/ArgumentSerializer"}}],"return":{"name":"void","desc":"V"},"doc":{"summary":"As the normal register method in <ref cls=\"net/minecraft/commands/synchronization/ArgumentTypes\">ArgumentTypes</ref> does not work well with<br> generic arguments, here you can register your generic argument types.","text":"As the normal register method in <ref cls=\"net/minecraft/commands/synchronization/ArgumentTypes\">ArgumentTypes</ref> does not work well with<br> generic arguments, here you can register your generic argument types. Just make<br> sure you don't register something that breaks type safety."}},{"name":"getArgumentOrDefault","modifiers":["public","static"],"typeId":"<T>(com.mojang.brigadier.context.CommandContext<?>,java.lang.String,java.lang.Class<T>,T)T","parameters":[{"name":"ctx","type":{"name":"com.mojang.brigadier.context.CommandContext<?>","desc":"Lcom/mojang/brigadier/context/CommandContext;","binaryName":"com/mojang/brigadier/context/CommandContext"}},{"name":"name","type":{"name":"java.lang.String","desc":"Ljava/lang/String;","binaryName":"java/lang/String"},"doc":"The argument's name"},{"name":"clazz","type":{"name":"java.lang.Class<T>","desc":"Ljava/lang/Class;","binaryName":"java/lang/Class"},"doc":"The argument's class"},{"name":"defaultValue","type":{"name":"T","typeVar":"T"},"doc":"A default value when the argument is not present."}],"return":{"name":"T","typeVar":"T"},"doc":{"summary":"Gets an argument for a command and if it's not present a default value.","text":"Gets an argument for a command and if it's not present a default value."}}],"doc":{"summary":"Utilities for commands.","text":"Utilities for commands."}}
